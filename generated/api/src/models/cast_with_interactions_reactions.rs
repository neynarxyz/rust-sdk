/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastWithInteractionsReactions {
    #[serde(rename = "likes")]
    pub likes: Vec<models::ReactionLike>,
    #[serde(rename = "recasts")]
    pub recasts: Vec<models::ReactionRecast>,
    #[serde(rename = "likes_count")]
    pub likes_count: i32,
    #[serde(rename = "recasts_count")]
    pub recasts_count: i32,
}

impl CastWithInteractionsReactions {
    pub fn new(
        likes: Vec<models::ReactionLike>,
        recasts: Vec<models::ReactionRecast>,
        likes_count: i32,
        recasts_count: i32,
    ) -> CastWithInteractionsReactions {
        CastWithInteractionsReactions {
            likes,
            recasts,
            likes_count,
            recasts_count,
        }
    }
}
