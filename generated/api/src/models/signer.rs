/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Signer {
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    /// Ed25519 public key
    #[serde(rename = "public_key")]
    pub public_key: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(
        rename = "signer_approval_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub signer_approval_url: Option<String>,
    /// The unique identifier of a farcaster user or app (unsigned integer)
    #[serde(rename = "fid", skip_serializing_if = "Option::is_none")]
    pub fid: Option<i32>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<models::SharedSignerPermission>>,
}

impl Signer {
    pub fn new(signer_uuid: String, public_key: String, status: Status) -> Signer {
        Signer {
            object: None,
            signer_uuid,
            public_key,
            status,
            signer_approval_url: None,
            fid: None,
            permissions: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "signer")]
    Signer,
}

impl Default for Object {
    fn default() -> Object {
        Self::Signer
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "generated")]
    Generated,
    #[serde(rename = "pending_approval")]
    PendingApproval,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "revoked")]
    Revoked,
}

impl Default for Status {
    fn default() -> Status {
        Self::Generated
    }
}
