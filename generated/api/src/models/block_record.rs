/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockRecord {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "blocked", skip_serializing_if = "Option::is_none")]
    pub blocked: Option<Box<models::User>>,
    #[serde(rename = "blocker", skip_serializing_if = "Option::is_none")]
    pub blocker: Option<Box<models::User>>,
    #[serde(rename = "blocked_at")]
    pub blocked_at: String,
}

impl BlockRecord {
    pub fn new(object: Object, blocked_at: String) -> BlockRecord {
        BlockRecord {
            object,
            blocked: None,
            blocker: None,
            blocked_at,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "block")]
    Block,
}

impl Default for Object {
    fn default() -> Object {
        Self::Block
    }
}
