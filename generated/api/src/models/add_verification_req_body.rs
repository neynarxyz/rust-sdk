/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddVerificationReqBody {
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    /// Ethereum address
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "block_hash")]
    pub block_hash: String,
    #[serde(rename = "eth_signature")]
    pub eth_signature: String,
    #[serde(rename = "verification_type", skip_serializing_if = "Option::is_none")]
    pub verification_type: Option<models::VerificationType>,
    #[serde(rename = "chain_id", skip_serializing_if = "Option::is_none")]
    pub chain_id: Option<models::VerificationChainId>,
}

impl AddVerificationReqBody {
    pub fn new(
        signer_uuid: String,
        address: String,
        block_hash: String,
        eth_signature: String,
    ) -> AddVerificationReqBody {
        AddVerificationReqBody {
            signer_uuid,
            address,
            block_hash,
            eth_signature,
            verification_type: None,
            chain_id: None,
        }
    }
}
