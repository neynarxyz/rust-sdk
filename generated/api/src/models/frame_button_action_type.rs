/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FrameButtonActionType : The action type of a mini app button. Action types \"mint\" & \"link\" are to be handled on the client side only and so they will produce a no/op for POST /farcaster/frame/action.
/// The action type of a mini app button. Action types \"mint\" & \"link\" are to be handled on the client side only and so they will produce a no/op for POST /farcaster/frame/action.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FrameButtonActionType {
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "post_redirect")]
    PostRedirect,
    #[serde(rename = "tx")]
    Tx,
    #[serde(rename = "link")]
    Link,
    #[serde(rename = "mint")]
    Mint,
}

impl std::fmt::Display for FrameButtonActionType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Post => write!(f, "post"),
            Self::PostRedirect => write!(f, "post_redirect"),
            Self::Tx => write!(f, "tx"),
            Self::Link => write!(f, "link"),
            Self::Mint => write!(f, "mint"),
        }
    }
}

impl Default for FrameButtonActionType {
    fn default() -> FrameButtonActionType {
        Self::Post
    }
}
