/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterUserOnChainReqBodySignersInner {
    /// Hexadecimal number expressed as string with '0x' prefix
    #[serde(rename = "signature")]
    pub signature: String,
    /// Hexadecimal number expressed as string with '0x' prefix
    #[serde(rename = "metadata")]
    pub metadata: String,
    /// Ed25519 public key
    #[serde(rename = "public_key")]
    pub public_key: String,
    #[serde(rename = "key_type", skip_serializing_if = "Option::is_none")]
    pub key_type: Option<i32>,
    #[serde(rename = "metadata_type", skip_serializing_if = "Option::is_none")]
    pub metadata_type: Option<i32>,
    #[serde(rename = "deadline")]
    pub deadline: i32,
}

impl RegisterUserOnChainReqBodySignersInner {
    pub fn new(
        signature: String,
        metadata: String,
        public_key: String,
        deadline: i32,
    ) -> RegisterUserOnChainReqBodySignersInner {
        RegisterUserOnChainReqBodySignersInner {
            signature,
            metadata,
            public_key,
            key_type: None,
            metadata_type: None,
            deadline,
        }
    }
}
