/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSendFungiblesReceipt {
    /// The unique identifier of a farcaster user or app (unsigned integer)
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "amount")]
    pub amount: f64,
    #[serde(rename = "status")]
    pub status: Status,
    /// Reason for failure (if status is failed)
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

impl TransactionSendFungiblesReceipt {
    pub fn new(fid: i32, amount: f64, status: Status) -> TransactionSendFungiblesReceipt {
        TransactionSendFungiblesReceipt {
            fid,
            amount,
            status,
            reason: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Sent
    }
}
