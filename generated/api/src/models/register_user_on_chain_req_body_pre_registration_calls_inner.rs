/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterUserOnChainReqBodyPreRegistrationCallsInner {
    /// Ethereum address
    #[serde(rename = "target")]
    pub target: String,
    /// Value in wei to send with the transaction. This is not the amount of ETH that will be sent, but rather the value of the transaction.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
    /// Hexadecimal number expressed as string with '0x' prefix
    #[serde(rename = "data")]
    pub data: String,
    /// Set it to true if you want to ignore the failure of this call. If set to false, the registration will fail if this call fails.
    #[serde(rename = "allow_failure", skip_serializing_if = "Option::is_none")]
    pub allow_failure: Option<bool>,
}

impl RegisterUserOnChainReqBodyPreRegistrationCallsInner {
    pub fn new(
        target: String,
        data: String,
    ) -> RegisterUserOnChainReqBodyPreRegistrationCallsInner {
        RegisterUserOnChainReqBodyPreRegistrationCallsInner {
            target,
            value: None,
            data,
            allow_failure: None,
        }
    }
}
