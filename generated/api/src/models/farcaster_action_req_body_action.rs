/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FarcasterActionReqBodyAction {
    /// The type of action being performed.
    #[serde(rename = "type")]
    pub r#type: String,
    /// The payload of the action being performed.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<serde_json::Value>,
}

impl FarcasterActionReqBodyAction {
    pub fn new(r#type: String) -> FarcasterActionReqBodyAction {
        FarcasterActionReqBodyAction {
            r#type,
            payload: None,
        }
    }
}
