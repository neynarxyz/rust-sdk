/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeveloperManagedSigner {
    /// Ed25519 public key
    #[serde(rename = "public_key")]
    pub public_key: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(
        rename = "signer_approval_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub signer_approval_url: Option<String>,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "fid", skip_serializing_if = "Option::is_none")]
    pub fid: Option<i32>,
}

impl DeveloperManagedSigner {
    pub fn new(public_key: String, status: Status) -> DeveloperManagedSigner {
        DeveloperManagedSigner {
            public_key,
            status,
            signer_approval_url: None,
            fid: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending_approval")]
    PendingApproval,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "revoked")]
    Revoked,
}

impl Default for Status {
    fn default() -> Status {
        Self::PendingApproval
    }
}
