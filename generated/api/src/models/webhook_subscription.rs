/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookSubscription {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "subscription_id")]
    pub subscription_id: String,
    #[serde(rename = "filters")]
    pub filters: Box<models::WebhookSubscriptionFilters>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl WebhookSubscription {
    pub fn new(
        object: Object,
        subscription_id: String,
        filters: models::WebhookSubscriptionFilters,
        created_at: String,
        updated_at: String,
    ) -> WebhookSubscription {
        WebhookSubscription {
            object,
            subscription_id,
            filters: Box::new(filters),
            created_at,
            updated_at,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "webhook_subscription")]
    WebhookSubscription,
}

impl Default for Object {
    fn default() -> Object {
        Self::WebhookSubscription
    }
}
