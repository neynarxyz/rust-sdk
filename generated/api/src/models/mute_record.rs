/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MuteRecord {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "muted")]
    pub muted: Box<models::User>,
    #[serde(rename = "muted_at")]
    pub muted_at: String,
}

impl MuteRecord {
    pub fn new(object: Object, muted: models::User, muted_at: String) -> MuteRecord {
        MuteRecord {
            object,
            muted: Box::new(muted),
            muted_at,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "mute")]
    Mute,
}

impl Default for Object {
    fn default() -> Object {
        Self::Mute
    }
}
