/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HtmlMetadata {
    #[serde(rename = "favicon", skip_serializing_if = "Option::is_none")]
    pub favicon: Option<String>,
    #[serde(rename = "modifiedTime", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<String>,
    #[serde(rename = "ogArticleAuthor", skip_serializing_if = "Option::is_none")]
    pub og_article_author: Option<String>,
    #[serde(
        rename = "ogArticleExpirationTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_article_expiration_time: Option<String>,
    #[serde(
        rename = "ogArticleModifiedTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_article_modified_time: Option<String>,
    #[serde(
        rename = "ogArticlePublishedTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_article_published_time: Option<String>,
    #[serde(rename = "ogArticlePublisher", skip_serializing_if = "Option::is_none")]
    pub og_article_publisher: Option<String>,
    #[serde(rename = "ogArticleSection", skip_serializing_if = "Option::is_none")]
    pub og_article_section: Option<String>,
    #[serde(rename = "ogArticleTag", skip_serializing_if = "Option::is_none")]
    pub og_article_tag: Option<String>,
    #[serde(rename = "ogAudio", skip_serializing_if = "Option::is_none")]
    pub og_audio: Option<String>,
    #[serde(rename = "ogAudioSecureURL", skip_serializing_if = "Option::is_none")]
    pub og_audio_secure_url: Option<String>,
    #[serde(rename = "ogAudioType", skip_serializing_if = "Option::is_none")]
    pub og_audio_type: Option<String>,
    #[serde(rename = "ogAudioURL", skip_serializing_if = "Option::is_none")]
    pub og_audio_url: Option<String>,
    #[serde(rename = "ogAvailability", skip_serializing_if = "Option::is_none")]
    pub og_availability: Option<String>,
    #[serde(rename = "ogDate", skip_serializing_if = "Option::is_none")]
    pub og_date: Option<String>,
    #[serde(rename = "ogDescription", skip_serializing_if = "Option::is_none")]
    pub og_description: Option<String>,
    #[serde(rename = "ogDeterminer", skip_serializing_if = "Option::is_none")]
    pub og_determiner: Option<String>,
    #[serde(rename = "ogEpisode", skip_serializing_if = "Option::is_none")]
    pub og_episode: Option<String>,
    #[serde(rename = "ogImage", skip_serializing_if = "Option::is_none")]
    pub og_image: Option<Vec<models::ImageObject>>,
    #[serde(rename = "ogLocale", skip_serializing_if = "Option::is_none")]
    pub og_locale: Option<String>,
    #[serde(rename = "ogLocaleAlternate", skip_serializing_if = "Option::is_none")]
    pub og_locale_alternate: Option<String>,
    #[serde(rename = "ogLogo", skip_serializing_if = "Option::is_none")]
    pub og_logo: Option<String>,
    #[serde(rename = "ogMovie", skip_serializing_if = "Option::is_none")]
    pub og_movie: Option<String>,
    #[serde(rename = "ogPriceAmount", skip_serializing_if = "Option::is_none")]
    pub og_price_amount: Option<String>,
    #[serde(rename = "ogPriceCurrency", skip_serializing_if = "Option::is_none")]
    pub og_price_currency: Option<String>,
    #[serde(
        rename = "ogProductAvailability",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_product_availability: Option<String>,
    #[serde(rename = "ogProductCondition", skip_serializing_if = "Option::is_none")]
    pub og_product_condition: Option<String>,
    #[serde(
        rename = "ogProductPriceAmount",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_product_price_amount: Option<String>,
    #[serde(
        rename = "ogProductPriceCurrency",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_product_price_currency: Option<String>,
    #[serde(
        rename = "ogProductRetailerItemId",
        skip_serializing_if = "Option::is_none"
    )]
    pub og_product_retailer_item_id: Option<String>,
    #[serde(rename = "ogSiteName", skip_serializing_if = "Option::is_none")]
    pub og_site_name: Option<String>,
    #[serde(rename = "ogTitle", skip_serializing_if = "Option::is_none")]
    pub og_title: Option<String>,
    #[serde(rename = "ogType", skip_serializing_if = "Option::is_none")]
    pub og_type: Option<String>,
    #[serde(rename = "ogUrl", skip_serializing_if = "Option::is_none")]
    pub og_url: Option<String>,
    #[serde(rename = "ogVideo", skip_serializing_if = "Option::is_none")]
    pub og_video: Option<Vec<models::VideoObject>>,
    #[serde(rename = "ogVideoActor", skip_serializing_if = "Option::is_none")]
    pub og_video_actor: Option<String>,
    #[serde(rename = "ogVideoActorId", skip_serializing_if = "Option::is_none")]
    pub og_video_actor_id: Option<String>,
    #[serde(rename = "ogVideoActorRole", skip_serializing_if = "Option::is_none")]
    pub og_video_actor_role: Option<String>,
    #[serde(rename = "ogVideoDirector", skip_serializing_if = "Option::is_none")]
    pub og_video_director: Option<String>,
    #[serde(rename = "ogVideoDuration", skip_serializing_if = "Option::is_none")]
    pub og_video_duration: Option<String>,
    #[serde(rename = "ogVideoOther", skip_serializing_if = "Option::is_none")]
    pub og_video_other: Option<String>,
    #[serde(rename = "ogVideoReleaseDate", skip_serializing_if = "Option::is_none")]
    pub og_video_release_date: Option<String>,
    #[serde(rename = "ogVideoSecureURL", skip_serializing_if = "Option::is_none")]
    pub og_video_secure_url: Option<String>,
    #[serde(rename = "ogVideoSeries", skip_serializing_if = "Option::is_none")]
    pub og_video_series: Option<String>,
    #[serde(rename = "ogVideoTag", skip_serializing_if = "Option::is_none")]
    pub og_video_tag: Option<String>,
    #[serde(rename = "ogVideoTvShow", skip_serializing_if = "Option::is_none")]
    pub og_video_tv_show: Option<String>,
    #[serde(rename = "ogVideoWriter", skip_serializing_if = "Option::is_none")]
    pub og_video_writer: Option<String>,
    #[serde(rename = "ogWebsite", skip_serializing_if = "Option::is_none")]
    pub og_website: Option<String>,
    #[serde(rename = "updatedTime", skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<String>,
    #[serde(rename = "oembed", skip_serializing_if = "Option::is_none")]
    pub oembed: Option<Box<models::HtmlMetadataAllOfOembed>>,
}

impl HtmlMetadata {
    pub fn new() -> HtmlMetadata {
        HtmlMetadata {
            favicon: None,
            modified_time: None,
            og_article_author: None,
            og_article_expiration_time: None,
            og_article_modified_time: None,
            og_article_published_time: None,
            og_article_publisher: None,
            og_article_section: None,
            og_article_tag: None,
            og_audio: None,
            og_audio_secure_url: None,
            og_audio_type: None,
            og_audio_url: None,
            og_availability: None,
            og_date: None,
            og_description: None,
            og_determiner: None,
            og_episode: None,
            og_image: None,
            og_locale: None,
            og_locale_alternate: None,
            og_logo: None,
            og_movie: None,
            og_price_amount: None,
            og_price_currency: None,
            og_product_availability: None,
            og_product_condition: None,
            og_product_price_amount: None,
            og_product_price_currency: None,
            og_product_retailer_item_id: None,
            og_site_name: None,
            og_title: None,
            og_type: None,
            og_url: None,
            og_video: None,
            og_video_actor: None,
            og_video_actor_id: None,
            og_video_actor_role: None,
            og_video_director: None,
            og_video_duration: None,
            og_video_other: None,
            og_video_release_date: None,
            og_video_secure_url: None,
            og_video_series: None,
            og_video_tag: None,
            og_video_tv_show: None,
            og_video_writer: None,
            og_website: None,
            updated_time: None,
            oembed: None,
        }
    }
}
