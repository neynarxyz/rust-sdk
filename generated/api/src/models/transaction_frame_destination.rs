/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionFrameDestination {
    /// Ethereum address
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "network")]
    pub network: models::Networks,
    /// Token contract address for the payment (e.g. 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 is USDC on Base)
    #[serde(rename = "token_contract_address")]
    pub token_contract_address: String,
    /// Amount to send (must be greater than 0)
    #[serde(rename = "amount")]
    pub amount: f64,
}

impl TransactionFrameDestination {
    pub fn new(
        address: String,
        network: models::Networks,
        token_contract_address: String,
        amount: f64,
    ) -> TransactionFrameDestination {
        TransactionFrameDestination {
            address,
            network,
            token_contract_address,
            amount,
        }
    }
}
