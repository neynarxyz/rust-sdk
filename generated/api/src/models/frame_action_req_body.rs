/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameActionReqBody {
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    /// Cast Hash
    #[serde(rename = "cast_hash", skip_serializing_if = "Option::is_none")]
    pub cast_hash: Option<String>,
    #[serde(rename = "action")]
    pub action: Box<models::FrameAction>,
}

impl FrameActionReqBody {
    pub fn new(signer_uuid: String, action: models::FrameAction) -> FrameActionReqBody {
        FrameActionReqBody {
            signer_uuid,
            cast_hash: None,
            action: Box::new(action),
        }
    }
}
