/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationsResponse {
    #[serde(rename = "unseen_notifications_count")]
    pub unseen_notifications_count: i32,
    #[serde(rename = "notifications")]
    pub notifications: Vec<models::Notification>,
    #[serde(rename = "next")]
    pub next: Box<models::NextCursor>,
}

impl NotificationsResponse {
    pub fn new(
        unseen_notifications_count: i32,
        notifications: Vec<models::Notification>,
        next: models::NextCursor,
    ) -> NotificationsResponse {
        NotificationsResponse {
            unseen_notifications_count,
            notifications,
            next: Box::new(next),
        }
    }
}
