/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageUsageResponse {
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<models::UserDehydrated>>,
    #[serde(rename = "casts", skip_serializing_if = "Option::is_none")]
    pub casts: Option<Box<models::StorageObject>>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<models::StorageObject>>,
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<Box<models::StorageObject>>,
    #[serde(rename = "verified_addresses", skip_serializing_if = "Option::is_none")]
    pub verified_addresses: Option<Box<models::StorageObject>>,
    #[serde(rename = "username_proofs", skip_serializing_if = "Option::is_none")]
    pub username_proofs: Option<Box<models::StorageObject>>,
    #[serde(rename = "signers", skip_serializing_if = "Option::is_none")]
    pub signers: Option<Box<models::StorageObject>>,
    #[serde(rename = "total_active_units", skip_serializing_if = "Option::is_none")]
    pub total_active_units: Option<i32>,
}

impl StorageUsageResponse {
    pub fn new() -> StorageUsageResponse {
        StorageUsageResponse {
            object: None,
            user: None,
            casts: None,
            reactions: None,
            links: None,
            verified_addresses: None,
            username_proofs: None,
            signers: None,
            total_active_units: None,
        }
    }
}
