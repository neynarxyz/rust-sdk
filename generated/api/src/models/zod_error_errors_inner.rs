/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ZodErrorErrorsInner {
    #[serde(rename = "code")]
    pub code: String,
    #[serde(rename = "expected")]
    pub expected: String,
    #[serde(rename = "received")]
    pub received: String,
    #[serde(rename = "path")]
    pub path: Vec<String>,
    #[serde(rename = "message")]
    pub message: String,
}

impl ZodErrorErrorsInner {
    pub fn new(
        code: String,
        expected: String,
        received: String,
        path: Vec<String>,
        message: String,
    ) -> ZodErrorErrorsInner {
        ZodErrorErrorsInner {
            code,
            expected,
            received,
            path,
            message,
        }
    }
}
