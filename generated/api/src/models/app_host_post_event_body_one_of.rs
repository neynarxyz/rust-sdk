/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppHostPostEventBodyOneOf {
    /// JFS-signed message containing the event payload. The message must be properly signed and contain valid event information.
    #[serde(rename = "signed_message")]
    pub signed_message: String,
    /// Domain of the mini app
    #[serde(rename = "app_domain")]
    pub app_domain: String,
}

impl AppHostPostEventBodyOneOf {
    pub fn new(signed_message: String, app_domain: String) -> AppHostPostEventBodyOneOf {
        AppHostPostEventBodyOneOf {
            signed_message,
            app_domain,
        }
    }
}
