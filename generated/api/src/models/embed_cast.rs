/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbedCast {
    /// [DEPRECATED: Use \"cast\" key instead]
    #[serde(rename = "cast_id", skip_serializing_if = "Option::is_none")]
    pub cast_id: Option<Box<models::CastId>>,
    #[serde(rename = "cast")]
    pub cast: Box<models::CastEmbedded>,
}

impl EmbedCast {
    pub fn new(cast: models::CastEmbedded) -> EmbedCast {
        EmbedCast {
            cast_id: None,
            cast: Box::new(cast),
        }
    }
}
