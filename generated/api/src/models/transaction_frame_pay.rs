/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionFramePay {
    /// Unique identifier for the transaction mini app
    #[serde(rename = "id")]
    pub id: String,
    /// URL that can be used to access the transaction mini app
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "type")]
    pub r#type: models::TransactionFrameType,
    #[serde(rename = "config")]
    pub config: Box<models::TransactionFrameConfig>,
    #[serde(rename = "status")]
    pub status: models::TransactionFrameStatus,
    #[serde(rename = "transaction")]
    pub transaction: Box<models::TransactionFramePayAllOfTransaction>,
}

impl TransactionFramePay {
    pub fn new(
        id: String,
        url: String,
        r#type: models::TransactionFrameType,
        config: models::TransactionFrameConfig,
        status: models::TransactionFrameStatus,
        transaction: models::TransactionFramePayAllOfTransaction,
    ) -> TransactionFramePay {
        TransactionFramePay {
            id,
            url,
            r#type,
            config: Box::new(config),
            status,
            transaction: Box::new(transaction),
        }
    }
}
