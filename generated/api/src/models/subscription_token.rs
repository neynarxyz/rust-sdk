/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionToken {
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "address", deserialize_with = "Option::deserialize")]
    pub address: Option<String>,
    #[serde(rename = "decimals")]
    pub decimals: i32,
    #[serde(rename = "erc20")]
    pub erc20: bool,
}

impl SubscriptionToken {
    pub fn new(
        symbol: String,
        address: Option<String>,
        decimals: i32,
        erc20: bool,
    ) -> SubscriptionToken {
        SubscriptionToken {
            symbol,
            address,
            decimals,
            erc20,
        }
    }
}
