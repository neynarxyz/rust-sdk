/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelFollowReqBody {
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    /// The unique identifier of a farcaster channel
    #[serde(rename = "channel_id")]
    pub channel_id: String,
}

impl ChannelFollowReqBody {
    pub fn new(signer_uuid: String, channel_id: String) -> ChannelFollowReqBody {
        ChannelFollowReqBody {
            signer_uuid,
            channel_id,
        }
    }
}
