/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Conversation {
    #[serde(rename = "conversation")]
    pub conversation: Box<models::ConversationConversation>,
    #[serde(rename = "next", skip_serializing_if = "Option::is_none")]
    pub next: Option<Box<models::NextCursor>>,
}

impl Conversation {
    pub fn new(conversation: models::ConversationConversation) -> Conversation {
        Conversation {
            conversation: Box::new(conversation),
            next: None,
        }
    }
}
