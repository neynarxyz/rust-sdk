/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastWithInteractionsAndConversations {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "parent_hash", deserialize_with = "Option::deserialize")]
    pub parent_hash: Option<String>,
    #[serde(rename = "parent_url", deserialize_with = "Option::deserialize")]
    pub parent_url: Option<String>,
    #[serde(rename = "root_parent_url", deserialize_with = "Option::deserialize")]
    pub root_parent_url: Option<String>,
    #[serde(rename = "parent_author")]
    pub parent_author: Box<models::CastParentAuthor>,
    #[serde(rename = "author")]
    pub author: Box<models::User>,
    #[serde(
        rename = "app",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub app: Option<Option<Box<models::UserDehydrated>>>,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "embeds")]
    pub embeds: Vec<models::Embed>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::CastNotificationType>,
    #[serde(rename = "frames", skip_serializing_if = "Option::is_none")]
    pub frames: Option<Vec<models::Frame>>,
    #[serde(rename = "reactions")]
    pub reactions: Box<models::CastWithInteractionsReactions>,
    #[serde(rename = "replies")]
    pub replies: Box<models::CastWithInteractionsReplies>,
    #[serde(rename = "thread_hash", deserialize_with = "Option::deserialize")]
    pub thread_hash: Option<String>,
    #[serde(rename = "mentioned_profiles")]
    pub mentioned_profiles: Vec<models::User>,
    /// Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
    #[serde(rename = "mentioned_profiles_ranges")]
    pub mentioned_profiles_ranges: Vec<models::TextRange>,
    #[serde(rename = "mentioned_channels")]
    pub mentioned_channels: Vec<models::ChannelDehydrated>,
    /// Positions within the text (inclusive start, exclusive end) where each mention occurs. Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
    #[serde(rename = "mentioned_channels_ranges")]
    pub mentioned_channels_ranges: Vec<models::TextRange>,
    #[serde(rename = "channel", deserialize_with = "Option::deserialize")]
    pub channel: Option<Box<models::ChannelOrChannelDehydrated>>,
    #[serde(rename = "viewer_context", skip_serializing_if = "Option::is_none")]
    pub viewer_context: Option<Box<models::CastViewerContext>>,
    #[serde(
        rename = "author_channel_context",
        skip_serializing_if = "Option::is_none"
    )]
    pub author_channel_context: Option<Box<models::ChannelUserContext>>,
    /// note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth.
    #[serde(rename = "direct_replies")]
    pub direct_replies: Vec<models::CastWithInteractionsAndConversationsRef>,
}

impl CastWithInteractionsAndConversations {
    pub fn new(
        object: Object,
        hash: String,
        parent_hash: Option<String>,
        parent_url: Option<String>,
        root_parent_url: Option<String>,
        parent_author: models::CastParentAuthor,
        author: models::User,
        text: String,
        timestamp: String,
        embeds: Vec<models::Embed>,
        reactions: models::CastWithInteractionsReactions,
        replies: models::CastWithInteractionsReplies,
        thread_hash: Option<String>,
        mentioned_profiles: Vec<models::User>,
        mentioned_profiles_ranges: Vec<models::TextRange>,
        mentioned_channels: Vec<models::ChannelDehydrated>,
        mentioned_channels_ranges: Vec<models::TextRange>,
        channel: Option<models::ChannelOrChannelDehydrated>,
        direct_replies: Vec<models::CastWithInteractionsAndConversationsRef>,
    ) -> CastWithInteractionsAndConversations {
        CastWithInteractionsAndConversations {
            object,
            hash,
            parent_hash,
            parent_url,
            root_parent_url,
            parent_author: Box::new(parent_author),
            author: Box::new(author),
            app: None,
            text,
            timestamp,
            embeds,
            r#type: None,
            frames: None,
            reactions: Box::new(reactions),
            replies: Box::new(replies),
            thread_hash,
            mentioned_profiles,
            mentioned_profiles_ranges,
            mentioned_channels,
            mentioned_channels_ranges,
            channel: if let Some(x) = channel {
                Some(Box::new(x))
            } else {
                None
            },
            viewer_context: None,
            author_channel_context: None,
            direct_replies,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "cast")]
    Cast,
}

impl Default for Object {
    fn default() -> Object {
        Self::Cast
    }
}
