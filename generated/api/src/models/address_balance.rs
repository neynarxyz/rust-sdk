/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.37.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AddressBalance : The token balances associated with a wallet address
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressBalance {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "verified_address")]
    pub verified_address: Box<models::AddressBalanceVerifiedAddress>,
    #[serde(rename = "token_balances")]
    pub token_balances: Vec<models::TokenBalance>,
}

impl AddressBalance {
    /// The token balances associated with a wallet address
    pub fn new(
        object: Object,
        verified_address: models::AddressBalanceVerifiedAddress,
        token_balances: Vec<models::TokenBalance>,
    ) -> AddressBalance {
        AddressBalance {
            object,
            verified_address: Box::new(verified_address),
            token_balances,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "address_balance")]
    AddressBalance,
}

impl Default for Object {
    fn default() -> Object {
        Self::AddressBalance
    }
}
