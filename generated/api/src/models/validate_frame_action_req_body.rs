/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateFrameActionReqBody {
    /// Hexadecimal string of message bytes.
    #[serde(rename = "message_bytes_in_hex")]
    pub message_bytes_in_hex: String,
    /// Adds viewer_context inside the cast object to indicate whether the interactor reacted to the cast housing the mini app.
    #[serde(
        rename = "cast_reaction_context",
        skip_serializing_if = "Option::is_none"
    )]
    pub cast_reaction_context: Option<bool>,
    /// Adds viewer_context inside the user (interactor) object to indicate whether the interactor follows or is followed by the cast author.
    #[serde(rename = "follow_context", skip_serializing_if = "Option::is_none")]
    pub follow_context: Option<bool>,
    /// Adds context about the app used by the user inside `frame.action`.
    #[serde(rename = "signer_context", skip_serializing_if = "Option::is_none")]
    pub signer_context: Option<bool>,
    /// Adds context about the channel that the cast belongs to inside of the cast object.
    #[serde(
        rename = "channel_follow_context",
        skip_serializing_if = "Option::is_none"
    )]
    pub channel_follow_context: Option<bool>,
}

impl ValidateFrameActionReqBody {
    pub fn new(message_bytes_in_hex: String) -> ValidateFrameActionReqBody {
        ValidateFrameActionReqBody {
            message_bytes_in_hex,
            cast_reaction_context: None,
            follow_context: None,
            signer_context: None,
            channel_follow_context: None,
        }
    }
}
