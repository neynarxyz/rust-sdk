/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EmbedType : The content type of the embedded file
/// The content type of the embedded file
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmbedType {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "video")]
    Video,
    #[serde(rename = "audio")]
    Audio,
    #[serde(rename = "text/html")]
    TextSlashHtml,
    #[serde(rename = "text/plain")]
    TextSlashPlain,
    #[serde(rename = "image/jpeg")]
    ImageSlashJpeg,
    #[serde(rename = "image/png")]
    ImageSlashPng,
    #[serde(rename = "image/gif")]
    ImageSlashGif,
    #[serde(rename = "image/webp")]
    ImageSlashWebp,
    #[serde(rename = "image/svg+xml")]
    ImageSlashSvgPlusXml,
    #[serde(rename = "image/heif")]
    ImageSlashHeif,
    #[serde(rename = "video/mp4")]
    VideoSlashMp4,
    #[serde(rename = "video/quicktime")]
    VideoSlashQuicktime,
    #[serde(rename = "audio/mpeg")]
    AudioSlashMpeg,
    #[serde(rename = "application/pdf")]
    ApplicationSlashPdf,
    #[serde(rename = "application/json")]
    ApplicationSlashJson,
    #[serde(rename = "application/x-mpegurl")]
    ApplicationSlashXMpegurl,
}

impl std::fmt::Display for EmbedType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Text => write!(f, "text"),
            Self::Image => write!(f, "image"),
            Self::Video => write!(f, "video"),
            Self::Audio => write!(f, "audio"),
            Self::TextSlashHtml => write!(f, "text/html"),
            Self::TextSlashPlain => write!(f, "text/plain"),
            Self::ImageSlashJpeg => write!(f, "image/jpeg"),
            Self::ImageSlashPng => write!(f, "image/png"),
            Self::ImageSlashGif => write!(f, "image/gif"),
            Self::ImageSlashWebp => write!(f, "image/webp"),
            Self::ImageSlashSvgPlusXml => write!(f, "image/svg+xml"),
            Self::ImageSlashHeif => write!(f, "image/heif"),
            Self::VideoSlashMp4 => write!(f, "video/mp4"),
            Self::VideoSlashQuicktime => write!(f, "video/quicktime"),
            Self::AudioSlashMpeg => write!(f, "audio/mpeg"),
            Self::ApplicationSlashPdf => write!(f, "application/pdf"),
            Self::ApplicationSlashJson => write!(f, "application/json"),
            Self::ApplicationSlashXMpegurl => write!(f, "application/x-mpegurl"),
        }
    }
}

impl Default for EmbedType {
    fn default() -> EmbedType {
        Self::Text
    }
}
