/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FarcasterManifest {
    #[serde(rename = "account_association")]
    pub account_association: Box<models::FarcasterManifestAccountAssociation>,
    #[serde(rename = "frame", skip_serializing_if = "Option::is_none")]
    pub frame: Option<Box<models::FarcasterManifestFrame>>,
}

impl FarcasterManifest {
    pub fn new(
        account_association: models::FarcasterManifestAccountAssociation,
    ) -> FarcasterManifest {
        FarcasterManifest {
            account_association: Box::new(account_association),
            frame: None,
        }
    }
}
