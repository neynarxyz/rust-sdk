/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastEmbedded {
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "parent_hash", deserialize_with = "Option::deserialize")]
    pub parent_hash: Option<String>,
    #[serde(rename = "parent_url", deserialize_with = "Option::deserialize")]
    pub parent_url: Option<String>,
    #[serde(rename = "root_parent_url", deserialize_with = "Option::deserialize")]
    pub root_parent_url: Option<String>,
    #[serde(rename = "parent_author")]
    pub parent_author: Box<models::CastEmbeddedParentAuthor>,
    #[serde(rename = "author")]
    pub author: Box<models::UserDehydrated>,
    #[serde(
        rename = "app",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub app: Option<Option<Box<models::UserDehydrated>>>,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "type")]
    pub r#type: models::CastNotificationType,
    #[serde(rename = "embeds")]
    pub embeds: Vec<models::EmbedDeep>,
    #[serde(rename = "channel", deserialize_with = "Option::deserialize")]
    pub channel: Option<Box<models::ChannelDehydrated>>,
}

impl CastEmbedded {
    pub fn new(
        hash: String,
        parent_hash: Option<String>,
        parent_url: Option<String>,
        root_parent_url: Option<String>,
        parent_author: models::CastEmbeddedParentAuthor,
        author: models::UserDehydrated,
        text: String,
        timestamp: String,
        r#type: models::CastNotificationType,
        embeds: Vec<models::EmbedDeep>,
        channel: Option<models::ChannelDehydrated>,
    ) -> CastEmbedded {
        CastEmbedded {
            hash,
            parent_hash,
            parent_url,
            root_parent_url,
            parent_author: Box::new(parent_author),
            author: Box::new(author),
            app: None,
            text,
            timestamp,
            r#type,
            embeds,
            channel: if let Some(x) = channel {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
