/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserVerifiedAddresses {
    /// List of verified Ethereum addresses of the user sorted by oldest to most recent.
    #[serde(rename = "eth_addresses")]
    pub eth_addresses: Vec<String>,
    /// List of verified Solana addresses of the user sorted by oldest to most recent.
    #[serde(rename = "sol_addresses")]
    pub sol_addresses: Vec<String>,
    #[serde(rename = "primary")]
    pub primary: Box<models::UserVerifiedAddressesPrimary>,
}

impl UserVerifiedAddresses {
    pub fn new(
        eth_addresses: Vec<String>,
        sol_addresses: Vec<String>,
        primary: models::UserVerifiedAddressesPrimary,
    ) -> UserVerifiedAddresses {
        UserVerifiedAddresses {
            eth_addresses,
            sol_addresses,
            primary: Box::new(primary),
        }
    }
}
