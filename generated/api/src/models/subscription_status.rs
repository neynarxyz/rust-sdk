/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionStatus {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "status")]
    pub status: bool,
    #[serde(rename = "expires_at", deserialize_with = "Option::deserialize")]
    pub expires_at: Option<i64>,
    #[serde(rename = "subscribed_at", deserialize_with = "Option::deserialize")]
    pub subscribed_at: Option<i64>,
    #[serde(rename = "tier", deserialize_with = "Option::deserialize")]
    pub tier: Option<Box<models::SubscriptionTier>>,
}

impl SubscriptionStatus {
    pub fn new(
        object: Object,
        status: bool,
        expires_at: Option<i64>,
        subscribed_at: Option<i64>,
        tier: Option<models::SubscriptionTier>,
    ) -> SubscriptionStatus {
        SubscriptionStatus {
            object,
            status,
            expires_at,
            subscribed_at,
            tier: if let Some(x) = tier {
                Some(Box::new(x))
            } else {
                None
            },
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "subscribed_to_dehydrated")]
    SubscribedToDehydrated,
}

impl Default for Object {
    fn default() -> Object {
        Self::SubscribedToDehydrated
    }
}
