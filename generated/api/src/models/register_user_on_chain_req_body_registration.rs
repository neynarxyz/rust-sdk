/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterUserOnChainReqBodyRegistration {
    #[serde(rename = "deadline")]
    pub deadline: i32,
    /// Hexadecimal number expressed as string with '0x' prefix
    #[serde(rename = "signature")]
    pub signature: String,
    /// Ethereum address
    #[serde(rename = "custody_address")]
    pub custody_address: String,
    /// Ethereum address
    #[serde(rename = "recovery_address")]
    pub recovery_address: String,
}

impl RegisterUserOnChainReqBodyRegistration {
    pub fn new(
        deadline: i32,
        signature: String,
        custody_address: String,
        recovery_address: String,
    ) -> RegisterUserOnChainReqBodyRegistration {
        RegisterUserOnChainReqBodyRegistration {
            deadline,
            signature,
            custody_address,
            recovery_address,
        }
    }
}
