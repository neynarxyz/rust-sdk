/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SendFrameNotificationsReqBody {
    /// An array of target FIDs to whom the notifications should be sent. Each FID must be a positive integer. Pass an empty array to send notifications to all FIDs with notifications enabled for the mini app.
    #[serde(rename = "target_fids")]
    pub target_fids: Vec<i32>,
    #[serde(rename = "notification")]
    pub notification: Box<models::SendFrameNotificationsReqBodyNotification>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Box<models::SendFrameNotificationsReqBodyFilters>>,
}

impl SendFrameNotificationsReqBody {
    pub fn new(
        target_fids: Vec<i32>,
        notification: models::SendFrameNotificationsReqBodyNotification,
    ) -> SendFrameNotificationsReqBody {
        SendFrameNotificationsReqBody {
            target_fids,
            notification: Box::new(notification),
            filters: None,
        }
    }
}
