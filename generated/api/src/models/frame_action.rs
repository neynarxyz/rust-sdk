/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameAction {
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "button")]
    pub button: Box<models::FrameActionButton>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<Box<models::FrameInput>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<models::FrameState>>,
    #[serde(rename = "transaction", skip_serializing_if = "Option::is_none")]
    pub transaction: Option<Box<models::FrameTransaction>>,
    /// The connected wallet address of the interacting user.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// URL of the mini apps
    #[serde(rename = "frames_url")]
    pub frames_url: String,
    /// URL of the post to get the next mini app
    #[serde(rename = "post_url")]
    pub post_url: String,
}

impl FrameAction {
    pub fn new(
        button: models::FrameActionButton,
        frames_url: String,
        post_url: String,
    ) -> FrameAction {
        FrameAction {
            version: None,
            title: None,
            image: None,
            button: Box::new(button),
            input: None,
            state: None,
            transaction: None,
            address: None,
            frames_url,
            post_url,
        }
    }
}
