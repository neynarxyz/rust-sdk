/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NeynarFrameUpdateReqBody {
    /// The UUID of the mini app to update.
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    /// The name of the mini app.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "pages")]
    pub pages: Vec<models::NeynarFramePage>,
}

impl NeynarFrameUpdateReqBody {
    pub fn new(uuid: uuid::Uuid, pages: Vec<models::NeynarFramePage>) -> NeynarFrameUpdateReqBody {
        NeynarFrameUpdateReqBody {
            uuid,
            name: None,
            pages,
        }
    }
}
