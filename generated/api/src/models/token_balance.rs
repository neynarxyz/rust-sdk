/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TokenBalance : The token balance associated with a wallet address and a network
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenBalance {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "token")]
    pub token: Box<models::TokenBalanceToken>,
    #[serde(rename = "balance")]
    pub balance: Box<models::TokenBalanceBalance>,
}

impl TokenBalance {
    /// The token balance associated with a wallet address and a network
    pub fn new(
        object: Object,
        token: models::TokenBalanceToken,
        balance: models::TokenBalanceBalance,
    ) -> TokenBalance {
        TokenBalance {
            object,
            token: Box::new(token),
            balance: Box::new(balance),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "token_balance")]
    TokenBalance,
}

impl Default for Object {
    fn default() -> Object {
        Self::TokenBalance
    }
}
