/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterUserOnChainReqBody {
    #[serde(rename = "registration")]
    pub registration: Box<models::RegisterUserOnChainReqBodyRegistration>,
    #[serde(rename = "storage_units", skip_serializing_if = "Option::is_none")]
    pub storage_units: Option<i32>,
    #[serde(rename = "signers", skip_serializing_if = "Option::is_none")]
    pub signers: Option<Vec<models::RegisterUserOnChainReqBodySignersInner>>,
    #[serde(
        rename = "pre_registration_calls",
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_registration_calls:
        Option<Vec<models::RegisterUserOnChainReqBodyPreRegistrationCallsInner>>,
    /// An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.
    #[serde(rename = "idem", skip_serializing_if = "Option::is_none")]
    pub idem: Option<String>,
}

impl RegisterUserOnChainReqBody {
    pub fn new(
        registration: models::RegisterUserOnChainReqBodyRegistration,
    ) -> RegisterUserOnChainReqBody {
        RegisterUserOnChainReqBody {
            registration: Box::new(registration),
            storage_units: None,
            signers: None,
            pre_registration_calls: None,
            idem: None,
        }
    }
}
