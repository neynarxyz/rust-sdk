/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetNotificationCampaignStats200ResponseNotificationCampaignsInnerStats {
    /// The total number of notification tokens for intended recipients.
    #[serde(
        rename = "intended_recipient_notification_token_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub intended_recipient_notification_token_count: Option<i32>,
    /// An array of Farcaster FIDs of intended recipient applications.
    #[serde(
        rename = "intended_recipient_app_fids",
        skip_serializing_if = "Option::is_none"
    )]
    pub intended_recipient_app_fids: Option<Vec<i32>>,
    /// The number of notifications successfully sent.
    #[serde(rename = "successful_sends", skip_serializing_if = "Option::is_none")]
    pub successful_sends: Option<i32>,
    /// A record mapping app FIDs (as strings) to the number of successful sends for that app.
    #[serde(
        rename = "successful_sends_by_app_fid",
        skip_serializing_if = "Option::is_none"
    )]
    pub successful_sends_by_app_fid: Option<std::collections::HashMap<String, i32>>,
    /// The total number of times notifications from this campaign have been opened.
    #[serde(rename = "total_opens", skip_serializing_if = "Option::is_none")]
    pub total_opens: Option<i32>,
    /// A record mapping app FIDs (as strings) to the number of opens for that app.
    #[serde(
        rename = "total_opens_by_app_fid",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_opens_by_app_fid: Option<std::collections::HashMap<String, i32>>,
    /// The number of unique recipients who opened a notification from this campaign.
    #[serde(rename = "unique_opens", skip_serializing_if = "Option::is_none")]
    pub unique_opens: Option<i32>,
    /// A record mapping app FIDs (as strings) to the number of unique opens for that app.
    #[serde(
        rename = "unique_opens_by_app_fid",
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_opens_by_app_fid: Option<std::collections::HashMap<String, i32>>,
}

impl GetNotificationCampaignStats200ResponseNotificationCampaignsInnerStats {
    pub fn new() -> GetNotificationCampaignStats200ResponseNotificationCampaignsInnerStats {
        GetNotificationCampaignStats200ResponseNotificationCampaignsInnerStats {
            intended_recipient_notification_token_count: None,
            intended_recipient_app_fids: None,
            successful_sends: None,
            successful_sends_by_app_fid: None,
            total_opens: None,
            total_opens_by_app_fid: None,
            unique_opens: None,
            unique_opens_by_app_fid: None,
        }
    }
}
