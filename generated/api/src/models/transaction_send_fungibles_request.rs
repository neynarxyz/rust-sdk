/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.43.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSendFungiblesRequest {
    #[serde(rename = "network")]
    pub network: Network,
    /// Contract address of the fungible token to send. If not provided, the default is the native token of the network.
    #[serde(
        rename = "fungible_contract_address",
        skip_serializing_if = "Option::is_none"
    )]
    pub fungible_contract_address: Option<String>,
    #[serde(rename = "recipients")]
    pub recipients: Vec<models::TransactionSendFungiblesRecipient>,
}

impl TransactionSendFungiblesRequest {
    pub fn new(
        network: Network,
        recipients: Vec<models::TransactionSendFungiblesRecipient>,
    ) -> TransactionSendFungiblesRequest {
        TransactionSendFungiblesRequest {
            network,
            fungible_contract_address: None,
            recipients,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Network {
    #[serde(rename = "base")]
    Base,
    #[serde(rename = "optimism")]
    Optimism,
    #[serde(rename = "base-sepolia")]
    BaseSepolia,
}

impl Default for Network {
    fn default() -> Network {
        Self::Base
    }
}
