/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationDelivery {
    #[serde(rename = "object")]
    pub object: Object,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "status")]
    pub status: Status,
}

impl NotificationDelivery {
    pub fn new(object: Object, fid: i32, status: Status) -> NotificationDelivery {
        NotificationDelivery {
            object,
            fid,
            status,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "notification_delivery")]
    NotificationDelivery,
}

impl Default for Object {
    fn default() -> Object {
        Self::NotificationDelivery
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "token_not_found")]
    TokenNotFound,
    #[serde(rename = "token_disabled")]
    TokenDisabled,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Success
    }
}
