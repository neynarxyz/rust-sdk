/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameActionButton {
    /// Title of the button
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Index of the button
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "action_type")]
    pub action_type: models::FrameButtonActionType,
    /// Target of the button
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Used specifically for the tx action type to post a successful transaction hash
    #[serde(rename = "post_url", skip_serializing_if = "Option::is_none")]
    pub post_url: Option<String>,
}

impl FrameActionButton {
    pub fn new(index: i32, action_type: models::FrameButtonActionType) -> FrameActionButton {
        FrameActionButton {
            title: None,
            index,
            action_type,
            target: None,
            post_url: None,
        }
    }
}
