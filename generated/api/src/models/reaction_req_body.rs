/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReactionReqBody {
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    #[serde(rename = "reaction_type")]
    pub reaction_type: models::ReactionType,
    #[serde(rename = "target")]
    pub target: String,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "target_author_fid", skip_serializing_if = "Option::is_none")]
    pub target_author_fid: Option<i32>,
    /// An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.
    #[serde(rename = "idem", skip_serializing_if = "Option::is_none")]
    pub idem: Option<String>,
}

impl ReactionReqBody {
    pub fn new(
        signer_uuid: String,
        reaction_type: models::ReactionType,
        target: String,
    ) -> ReactionReqBody {
        ReactionReqBody {
            signer_uuid,
            reaction_type,
            target,
            target_author_fid: None,
            idem: None,
        }
    }
}
