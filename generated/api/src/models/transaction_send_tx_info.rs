/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSendTxInfo {
    #[serde(rename = "network")]
    pub network: Network,
    #[serde(rename = "transaction_hash")]
    pub transaction_hash: String,
    /// Gas used for the transaction.
    #[serde(rename = "gas_used")]
    pub gas_used: String,
    /// Hash of the transaction that approved the transfer. This is only present if the fungible token is not native token of the network.
    #[serde(rename = "approval_hash")]
    pub approval_hash: String,
}

impl TransactionSendTxInfo {
    pub fn new(
        network: Network,
        transaction_hash: String,
        gas_used: String,
        approval_hash: String,
    ) -> TransactionSendTxInfo {
        TransactionSendTxInfo {
            network,
            transaction_hash,
            gas_used,
            approval_hash,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Network {
    #[serde(rename = "base")]
    Base,
    #[serde(rename = "optimism")]
    Optimism,
    #[serde(rename = "base-sepolia")]
    BaseSepolia,
}

impl Default for Network {
    fn default() -> Network {
        Self::Base
    }
}
