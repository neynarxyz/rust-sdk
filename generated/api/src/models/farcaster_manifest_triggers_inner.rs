/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FarcasterManifestTriggersInner {
    FarcasterManifestTriggersInnerOneOf(Box<models::FarcasterManifestTriggersInnerOneOf>),
    FarcasterManifestTriggersInnerOneOf1(Box<models::FarcasterManifestTriggersInnerOneOf1>),
}

impl Default for FarcasterManifestTriggersInner {
    fn default() -> Self {
        Self::FarcasterManifestTriggersInnerOneOf(Default::default())
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "cast")]
    Cast,
    #[serde(rename = "composer")]
    Composer,
}

impl Default for Type {
    fn default() -> Type {
        Self::Cast
    }
}
