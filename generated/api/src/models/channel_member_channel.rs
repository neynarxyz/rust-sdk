/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.37.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChannelMemberChannel {
    Channel(Box<models::Channel>),
    ChannelDehydrated(Box<models::ChannelDehydrated>),
}

impl Default for ChannelMemberChannel {
    fn default() -> Self {
        Self::Channel(Default::default())
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "channel_dehydrated")]
    ChannelDehydrated,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChannelDehydrated
    }
}
