/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastComposerActionsListResponseActionsInner {
    /// The name of the action.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The icon representing the action.
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// A brief description of the action.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// URL to learn more about the action.
    #[serde(rename = "about_url", skip_serializing_if = "Option::is_none")]
    pub about_url: Option<String>,
    /// URL of the action's image.
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    /// URL to perform the action.
    #[serde(rename = "action_url", skip_serializing_if = "Option::is_none")]
    pub action_url: Option<String>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Box<models::CastComposerActionsListResponseActionsInnerAction>>,
    /// Icon name for the action.
    #[serde(rename = "octicon", skip_serializing_if = "Option::is_none")]
    pub octicon: Option<String>,
    /// Number of times the action has been added.
    #[serde(rename = "added_count", skip_serializing_if = "Option::is_none")]
    pub added_count: Option<i32>,
    /// Name of the application providing the action.
    #[serde(rename = "app_name", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<String>,
    /// Author's Farcaster ID.
    #[serde(rename = "author_fid", skip_serializing_if = "Option::is_none")]
    pub author_fid: Option<i32>,
    /// Category of the action.
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// Object type, which is \"composer_action\".
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

impl CastComposerActionsListResponseActionsInner {
    pub fn new() -> CastComposerActionsListResponseActionsInner {
        CastComposerActionsListResponseActionsInner {
            name: None,
            icon: None,
            description: None,
            about_url: None,
            image_url: None,
            action_url: None,
            action: None,
            octicon: None,
            added_count: None,
            app_name: None,
            author_fid: None,
            category: None,
            object: None,
        }
    }
}
