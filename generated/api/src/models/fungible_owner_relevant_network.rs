/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FungibleOwnerRelevantNetwork : A blockchain network supported for fungible owner relevance queries
/// A blockchain network supported for fungible owner relevance queries
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FungibleOwnerRelevantNetwork {
    #[serde(rename = "ethereum")]
    Ethereum,
    #[serde(rename = "optimism")]
    Optimism,
    #[serde(rename = "base")]
    Base,
    #[serde(rename = "arbitrum")]
    Arbitrum,
    #[serde(rename = "solana")]
    Solana,
}

impl std::fmt::Display for FungibleOwnerRelevantNetwork {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ethereum => write!(f, "ethereum"),
            Self::Optimism => write!(f, "optimism"),
            Self::Base => write!(f, "base"),
            Self::Arbitrum => write!(f, "arbitrum"),
            Self::Solana => write!(f, "solana"),
        }
    }
}

impl Default for FungibleOwnerRelevantNetwork {
    fn default() -> FungibleOwnerRelevantNetwork {
        Self::Ethereum
    }
}
