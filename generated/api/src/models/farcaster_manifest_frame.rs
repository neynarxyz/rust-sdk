/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FarcasterManifestFrame {
    #[serde(rename = "version")]
    pub version: Version,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "home_url")]
    pub home_url: String,
    #[serde(rename = "icon_url")]
    pub icon_url: String,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "button_title", skip_serializing_if = "Option::is_none")]
    pub button_title: Option<String>,
    #[serde(rename = "splash_image_url", skip_serializing_if = "Option::is_none")]
    pub splash_image_url: Option<String>,
    #[serde(
        rename = "splash_background_color",
        skip_serializing_if = "Option::is_none"
    )]
    pub splash_background_color: Option<String>,
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    /// Short subtitle for the frame
    #[serde(rename = "subtitle", skip_serializing_if = "Option::is_none")]
    pub subtitle: Option<String>,
    /// Detailed description of the frame
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// URLs of screenshots showcasing the frame
    #[serde(rename = "screenshot_urls", skip_serializing_if = "Option::is_none")]
    pub screenshot_urls: Option<Vec<String>>,
    /// Primary category the frame belongs to
    #[serde(rename = "primary_category", skip_serializing_if = "Option::is_none")]
    pub primary_category: Option<String>,
    /// Tags associated with the frame
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// URL of the hero image displayed for the frame
    #[serde(rename = "hero_image_url", skip_serializing_if = "Option::is_none")]
    pub hero_image_url: Option<String>,
    /// Short tagline for the frame
    #[serde(rename = "tagline", skip_serializing_if = "Option::is_none")]
    pub tagline: Option<String>,
    /// Title used for Open Graph previews
    #[serde(rename = "og_title", skip_serializing_if = "Option::is_none")]
    pub og_title: Option<String>,
    /// Description used for Open Graph previews
    #[serde(rename = "og_description", skip_serializing_if = "Option::is_none")]
    pub og_description: Option<String>,
    /// Image URL used for Open Graph previews
    #[serde(rename = "og_image_url", skip_serializing_if = "Option::is_none")]
    pub og_image_url: Option<String>,
    /// Whether search engines should not index this frame
    #[serde(rename = "noindex", skip_serializing_if = "Option::is_none")]
    pub noindex: Option<bool>,
}

impl FarcasterManifestFrame {
    pub fn new(
        version: Version,
        name: String,
        home_url: String,
        icon_url: String,
    ) -> FarcasterManifestFrame {
        FarcasterManifestFrame {
            version,
            name,
            home_url,
            icon_url,
            image_url: None,
            button_title: None,
            splash_image_url: None,
            splash_background_color: None,
            webhook_url: None,
            subtitle: None,
            description: None,
            screenshot_urls: None,
            primary_category: None,
            tags: None,
            hero_image_url: None,
            tagline: None,
            og_title: None,
            og_description: None,
            og_image_url: None,
            noindex: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "0.0.0")]
    Variant0Period0Period0,
    #[serde(rename = "0.0.1")]
    Variant0Period0Period1,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "next")]
    Next,
}

impl Default for Version {
    fn default() -> Version {
        Self::Variant0Period0Period0
    }
}
