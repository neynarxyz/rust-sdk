/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetNotificationCampaignStats200ResponseNotificationCampaignsInner {
    /// The unique identifier for the notification campaign.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The title of the notification campaign.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The body text of the notification.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats:
        Option<Box<models::GetNotificationCampaignStats200ResponseNotificationCampaignsInnerStats>>,
}

impl GetNotificationCampaignStats200ResponseNotificationCampaignsInner {
    pub fn new() -> GetNotificationCampaignStats200ResponseNotificationCampaignsInner {
        GetNotificationCampaignStats200ResponseNotificationCampaignsInner {
            id: None,
            title: None,
            body: None,
            created_at: None,
            stats: None,
        }
    }
}
