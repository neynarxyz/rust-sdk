/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserVerifiedAddressesPrimary {
    /// Ethereum address
    #[serde(rename = "eth_address", deserialize_with = "Option::deserialize")]
    pub eth_address: Option<String>,
    /// Solana address
    #[serde(rename = "sol_address", deserialize_with = "Option::deserialize")]
    pub sol_address: Option<String>,
}

impl UserVerifiedAddressesPrimary {
    pub fn new(
        eth_address: Option<String>,
        sol_address: Option<String>,
    ) -> UserVerifiedAddressesPrimary {
        UserVerifiedAddressesPrimary {
            eth_address,
            sol_address,
        }
    }
}
