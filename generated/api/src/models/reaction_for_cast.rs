/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReactionForCast {
    #[serde(rename = "reaction_type")]
    pub reaction_type: ReactionType,
    #[serde(rename = "reaction_timestamp")]
    pub reaction_timestamp: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "user")]
    pub user: Box<models::User>,
}

impl ReactionForCast {
    pub fn new(
        reaction_type: ReactionType,
        reaction_timestamp: String,
        object: Object,
        user: models::User,
    ) -> ReactionForCast {
        ReactionForCast {
            reaction_type,
            reaction_timestamp,
            object,
            user: Box::new(user),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReactionType {
    #[serde(rename = "like")]
    Like,
    #[serde(rename = "recast")]
    Recast,
}

impl Default for ReactionType {
    fn default() -> ReactionType {
        Self::Like
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "likes")]
    Likes,
    #[serde(rename = "recasts")]
    Recasts,
}

impl Default for Object {
    fn default() -> Object {
        Self::Likes
    }
}
