/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Notification {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "most_recent_timestamp")]
    pub most_recent_timestamp: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "seen")]
    pub seen: bool,
    #[serde(rename = "follows", skip_serializing_if = "Option::is_none")]
    pub follows: Option<Vec<models::Follower>>,
    #[serde(rename = "cast", skip_serializing_if = "Option::is_none")]
    pub cast: Option<Box<models::CastWithInteractions>>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Vec<models::ReactionWithUserInfo>>,
    /// The number of notifications of this(follows, likes, recast) type bundled in a single notification.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}

impl Notification {
    pub fn new(
        object: Object,
        most_recent_timestamp: String,
        r#type: Type,
        seen: bool,
    ) -> Notification {
        Notification {
            object,
            most_recent_timestamp,
            r#type,
            seen,
            follows: None,
            cast: None,
            reactions: None,
            count: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "notification")]
    Notification,
}

impl Default for Object {
    fn default() -> Object {
        Self::Notification
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "follows")]
    Follows,
    #[serde(rename = "recasts")]
    Recasts,
    #[serde(rename = "likes")]
    Likes,
    #[serde(rename = "mention")]
    Mention,
    #[serde(rename = "reply")]
    Reply,
    #[serde(rename = "quote")]
    Quote,
}

impl Default for Type {
    fn default() -> Type {
        Self::Follows
    }
}
