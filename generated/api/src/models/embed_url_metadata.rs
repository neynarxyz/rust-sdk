/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbedUrlMetadata {
    #[serde(rename = "_status")]
    pub _status: String,
    #[serde(
        rename = "content_type",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<Option<String>>,
    #[serde(
        rename = "content_length",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_length: Option<Option<i32>>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<Box<models::EmbedUrlMetadataImage>>,
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<Box<models::EmbedUrlMetadataVideo>>,
    #[serde(rename = "html", skip_serializing_if = "Option::is_none")]
    pub html: Option<Box<models::HtmlMetadata>>,
    #[serde(rename = "frame", skip_serializing_if = "Option::is_none")]
    pub frame: Option<Box<models::Frame>>,
}

impl EmbedUrlMetadata {
    pub fn new(_status: String) -> EmbedUrlMetadata {
        EmbedUrlMetadata {
            _status,
            content_type: None,
            content_length: None,
            image: None,
            video: None,
            html: None,
            frame: None,
        }
    }
}
