/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NeynarFrame {
    /// Unique identifier for the mini app.
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    /// Name of the mini app.
    #[serde(rename = "name")]
    pub name: String,
    /// Generated link for the mini app's first page.
    #[serde(rename = "link")]
    pub link: String,
    #[serde(rename = "pages")]
    pub pages: Vec<models::NeynarFramePage>,
    /// Indicates if the mini app is valid.
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
}

impl NeynarFrame {
    pub fn new(
        uuid: uuid::Uuid,
        name: String,
        link: String,
        pages: Vec<models::NeynarFramePage>,
    ) -> NeynarFrame {
        NeynarFrame {
            uuid,
            name,
            link,
            pages,
            valid: None,
        }
    }
}
