/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastComposerActionsListResponseActionsInnerAction {
    /// Type of the action (e.g., post).
    #[serde(rename = "action_type", skip_serializing_if = "Option::is_none")]
    pub action_type: Option<String>,
    /// URL to post the action.
    #[serde(rename = "post_url", skip_serializing_if = "Option::is_none")]
    pub post_url: Option<String>,
}

impl CastComposerActionsListResponseActionsInnerAction {
    pub fn new() -> CastComposerActionsListResponseActionsInnerAction {
        CastComposerActionsListResponseActionsInnerAction {
            action_type: None,
            post_url: None,
        }
    }
}
