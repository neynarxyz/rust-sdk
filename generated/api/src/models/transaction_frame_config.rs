/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionFrameConfig {
    /// Optional list of FIDs that are allowed to use this transaction mini app
    #[serde(rename = "allowlist_fids", skip_serializing_if = "Option::is_none")]
    pub allowlist_fids: Option<Vec<i32>>,
    /// List of items included in the transaction
    #[serde(rename = "line_items")]
    pub line_items: Vec<models::TransactionFrameLineItem>,
    /// Action button for primary CTA on the transaction mini app
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Box<models::TransactionFrameAction>>,
}

impl TransactionFrameConfig {
    pub fn new(line_items: Vec<models::TransactionFrameLineItem>) -> TransactionFrameConfig {
        TransactionFrameConfig {
            allowlist_fids: None,
            line_items,
            action: None,
        }
    }
}
