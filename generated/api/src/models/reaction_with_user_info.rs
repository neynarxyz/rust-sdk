/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.45.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReactionWithUserInfo {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "cast")]
    pub cast: Box<models::CastDehydrated>,
    #[serde(rename = "user")]
    pub user: Box<models::User>,
}

impl ReactionWithUserInfo {
    pub fn new(
        object: Object,
        cast: models::CastDehydrated,
        user: models::User,
    ) -> ReactionWithUserInfo {
        ReactionWithUserInfo {
            object,
            cast: Box::new(cast),
            user: Box::new(user),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "likes")]
    Likes,
    #[serde(rename = "recasts")]
    Recasts,
}

impl Default for Object {
    fn default() -> Object {
        Self::Likes
    }
}
