/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NeynarPageButton {
    /// The title of the button.
    #[serde(rename = "title")]
    pub title: String,
    /// The index of the button, first button should have index 1 and so on.
    #[serde(rename = "index")]
    pub index: i32,
    /// The type of action that the button performs.
    #[serde(rename = "action_type")]
    pub action_type: ActionType,
    #[serde(rename = "next_page", skip_serializing_if = "Option::is_none")]
    pub next_page: Option<Box<models::NeynarPageButtonNextPage>>,
}

impl NeynarPageButton {
    pub fn new(title: String, index: i32, action_type: ActionType) -> NeynarPageButton {
        NeynarPageButton {
            title,
            index,
            action_type,
            next_page: None,
        }
    }
}
/// The type of action that the button performs.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActionType {
    #[serde(rename = "post")]
    Post,
    #[serde(rename = "post_redirect")]
    PostRedirect,
    #[serde(rename = "mint")]
    Mint,
    #[serde(rename = "link")]
    Link,
}

impl Default for ActionType {
    fn default() -> ActionType {
        Self::Post
    }
}
