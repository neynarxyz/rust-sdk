/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppHostUserStateResponseNotificationsEnabledInner {
    /// Domain of the mini app
    #[serde(rename = "domain")]
    pub domain: String,
    /// Status of notifications for this domain (usually 'valid')
    #[serde(rename = "status")]
    pub status: String,
    /// When the notification preference was last updated
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl AppHostUserStateResponseNotificationsEnabledInner {
    pub fn new(
        domain: String,
        status: String,
        updated_at: String,
    ) -> AppHostUserStateResponseNotificationsEnabledInner {
        AppHostUserStateResponseNotificationsEnabledInner {
            domain,
            status,
            updated_at,
        }
    }
}
