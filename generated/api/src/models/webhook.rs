/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Webhook {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "webhook_id")]
    pub webhook_id: String,
    #[serde(rename = "developer_uuid")]
    pub developer_uuid: String,
    #[serde(rename = "target_url")]
    pub target_url: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "secrets")]
    pub secrets: Vec<models::WebhookSecret>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "http_timeout")]
    pub http_timeout: String,
    #[serde(rename = "rate_limit")]
    pub rate_limit: i32,
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "rate_limit_duration")]
    pub rate_limit_duration: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "deleted_at")]
    pub deleted_at: String,
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<Box<models::WebhookSubscription>>,
}

impl Webhook {
    pub fn new(
        object: Object,
        webhook_id: String,
        developer_uuid: String,
        target_url: String,
        title: String,
        secrets: Vec<models::WebhookSecret>,
        description: String,
        http_timeout: String,
        rate_limit: i32,
        active: bool,
        rate_limit_duration: String,
        created_at: String,
        updated_at: String,
        deleted_at: String,
    ) -> Webhook {
        Webhook {
            object,
            webhook_id,
            developer_uuid,
            target_url,
            title,
            secrets,
            description,
            http_timeout,
            rate_limit,
            active,
            rate_limit_duration,
            created_at,
            updated_at,
            deleted_at,
            subscription: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "webhook")]
    Webhook,
}

impl Default for Object {
    fn default() -> Object {
        Self::Webhook
    }
}
