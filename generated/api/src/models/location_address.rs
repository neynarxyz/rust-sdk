/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LocationAddress {
    #[serde(rename = "city")]
    pub city: String,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "state_code", skip_serializing_if = "Option::is_none")]
    pub state_code: Option<String>,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
}

impl LocationAddress {
    pub fn new(city: String, country: String) -> LocationAddress {
        LocationAddress {
            city,
            state: None,
            state_code: None,
            country,
            country_code: None,
        }
    }
}
