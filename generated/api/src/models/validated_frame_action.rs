/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidatedFrameAction {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "interactor")]
    pub interactor: Box<models::User>,
    #[serde(rename = "tapped_button")]
    pub tapped_button: Box<models::ValidatedFrameActionTappedButton>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<Box<models::FrameInput>>,
    #[serde(rename = "state")]
    pub state: Box<models::FrameState>,
    #[serde(rename = "cast")]
    pub cast: Box<models::CastWithInteractions>,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "signer", skip_serializing_if = "Option::is_none")]
    pub signer: Option<Box<models::ValidatedFrameActionSigner>>,
    #[serde(rename = "transaction", skip_serializing_if = "Option::is_none")]
    pub transaction: Option<Box<models::FrameTransaction>>,
    /// The connected wallet address of the interacting user.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
}

impl ValidatedFrameAction {
    pub fn new(
        object: Object,
        url: String,
        interactor: models::User,
        tapped_button: models::ValidatedFrameActionTappedButton,
        state: models::FrameState,
        cast: models::CastWithInteractions,
        timestamp: String,
    ) -> ValidatedFrameAction {
        ValidatedFrameAction {
            object,
            url,
            interactor: Box::new(interactor),
            tapped_button: Box::new(tapped_button),
            input: None,
            state: Box::new(state),
            cast: Box::new(cast),
            timestamp,
            signer: None,
            transaction: None,
            address: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "validated_frame_action")]
    ValidatedFrameAction,
}

impl Default for Object {
    fn default() -> Object {
        Self::ValidatedFrameAction
    }
}
