/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FilterType : The type of filter to apply to the feed.
/// The type of filter to apply to the feed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilterType {
    #[serde(rename = "fids")]
    Fids,
    #[serde(rename = "parent_url")]
    ParentUrl,
    #[serde(rename = "channel_id")]
    ChannelId,
    #[serde(rename = "embed_url")]
    EmbedUrl,
    #[serde(rename = "embed_types")]
    EmbedTypes,
    #[serde(rename = "global_trending")]
    GlobalTrending,
}

impl std::fmt::Display for FilterType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fids => write!(f, "fids"),
            Self::ParentUrl => write!(f, "parent_url"),
            Self::ChannelId => write!(f, "channel_id"),
            Self::EmbedUrl => write!(f, "embed_url"),
            Self::EmbedTypes => write!(f, "embed_types"),
            Self::GlobalTrending => write!(f, "global_trending"),
        }
    }
}

impl Default for FilterType {
    fn default() -> FilterType {
        Self::Fids
    }
}
