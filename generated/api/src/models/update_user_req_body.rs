/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateUserReqBody {
    /// UUID of the signer. `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    #[serde(rename = "bio", skip_serializing_if = "Option::is_none")]
    pub bio: Option<String>,
    #[serde(rename = "pfp_url", skip_serializing_if = "Option::is_none")]
    pub pfp_url: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<models::UpdateUserReqBodyLocation>>,
    #[serde(rename = "verified_accounts", skip_serializing_if = "Option::is_none")]
    pub verified_accounts: Option<Box<models::UpdateUserReqBodyVerifiedAccounts>>,
}

impl UpdateUserReqBody {
    pub fn new(signer_uuid: String) -> UpdateUserReqBody {
        UpdateUserReqBody {
            signer_uuid,
            bio: None,
            pfp_url: None,
            url: None,
            username: None,
            display_name: None,
            location: None,
            verified_accounts: None,
        }
    }
}
