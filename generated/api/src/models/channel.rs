/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Channel {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "description_mentioned_profiles",
        skip_serializing_if = "Option::is_none"
    )]
    pub description_mentioned_profiles: Option<Vec<models::UserDehydrated>>,
    /// Positions within the text (inclusive start, exclusive end) where each mention occurs.
    #[serde(
        rename = "description_mentioned_profiles_ranges",
        skip_serializing_if = "Option::is_none"
    )]
    pub description_mentioned_profiles_ranges: Option<Vec<models::TextRange>>,
    /// Epoch timestamp in seconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<f64>,
    /// Number of followers the channel has.
    #[serde(rename = "follower_count", skip_serializing_if = "Option::is_none")]
    pub follower_count: Option<f64>,
    #[serde(rename = "external_link", skip_serializing_if = "Option::is_none")]
    pub external_link: Option<Box<models::ChannelExternalLink>>,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "parent_url", skip_serializing_if = "Option::is_none")]
    pub parent_url: Option<String>,
    #[serde(rename = "lead", skip_serializing_if = "Option::is_none")]
    pub lead: Option<Box<models::User>>,
    #[serde(rename = "moderator_fids", skip_serializing_if = "Option::is_none")]
    pub moderator_fids: Option<Vec<i32>>,
    #[serde(rename = "member_count", skip_serializing_if = "Option::is_none")]
    pub member_count: Option<i32>,
    /// Use `lead` instead.
    #[serde(rename = "moderator", skip_serializing_if = "Option::is_none")]
    pub moderator: Option<Box<models::User>>,
    /// Cast Hash
    #[serde(rename = "pinned_cast_hash", skip_serializing_if = "Option::is_none")]
    pub pinned_cast_hash: Option<String>,
    #[serde(rename = "hosts", skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<models::User>>,
    #[serde(rename = "viewer_context", skip_serializing_if = "Option::is_none")]
    pub viewer_context: Option<Box<models::ChannelUserContext>>,
}

impl Channel {
    pub fn new(id: String, url: String, object: Object) -> Channel {
        Channel {
            id,
            url,
            object,
            name: None,
            description: None,
            description_mentioned_profiles: None,
            description_mentioned_profiles_ranges: None,
            created_at: None,
            follower_count: None,
            external_link: None,
            image_url: None,
            parent_url: None,
            lead: None,
            moderator_fids: None,
            member_count: None,
            moderator: None,
            pinned_cast_hash: None,
            hosts: None,
            viewer_context: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "channel")]
    Channel,
}

impl Default for Object {
    fn default() -> Object {
        Self::Channel
    }
}
