/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelDehydrated {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "viewer_context", skip_serializing_if = "Option::is_none")]
    pub viewer_context: Option<Box<models::ChannelUserContext>>,
}

impl ChannelDehydrated {
    pub fn new(id: String, name: String, object: Object) -> ChannelDehydrated {
        ChannelDehydrated {
            id,
            name,
            object,
            image_url: None,
            viewer_context: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "channel_dehydrated")]
    ChannelDehydrated,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChannelDehydrated
    }
}
