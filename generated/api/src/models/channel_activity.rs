/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelActivity {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "cast_count_1d")]
    pub cast_count_1d: String,
    #[serde(rename = "cast_count_7d")]
    pub cast_count_7d: String,
    #[serde(rename = "cast_count_30d")]
    pub cast_count_30d: String,
    #[serde(rename = "channel")]
    pub channel: Box<models::Channel>,
}

impl ChannelActivity {
    pub fn new(
        object: Object,
        cast_count_1d: String,
        cast_count_7d: String,
        cast_count_30d: String,
        channel: models::Channel,
    ) -> ChannelActivity {
        ChannelActivity {
            object,
            cast_count_1d,
            cast_count_7d,
            cast_count_30d,
            channel: Box::new(channel),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "channel_activity")]
    ChannelActivity,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChannelActivity
    }
}
