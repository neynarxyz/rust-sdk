/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignedKeyRequestSponsor {
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "fid", skip_serializing_if = "Option::is_none")]
    pub fid: Option<i32>,
    /// Signature generated by the fid of the sponsor and the signature generated from signKeyRequest for the app.
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    /// Neynar will sponsor the signer if set to true. **Note: ** If sponsor.fid and sponsor.signature are provided along with sponsored_by_neynar set to true,  the sponsor.fid and sponsor.signature will be ignored.  Neynar will sponsor the signer on behalf of the user. The developer will get charged in compute units.
    #[serde(
        rename = "sponsored_by_neynar",
        skip_serializing_if = "Option::is_none"
    )]
    pub sponsored_by_neynar: Option<bool>,
}

impl SignedKeyRequestSponsor {
    pub fn new() -> SignedKeyRequestSponsor {
        SignedKeyRequestSponsor {
            fid: None,
            signature: None,
            sponsored_by_neynar: None,
        }
    }
}
