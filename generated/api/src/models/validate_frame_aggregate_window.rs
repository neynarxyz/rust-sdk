/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidateFrameAggregateWindow {
    #[serde(rename = "10s")]
    Variant10s,
    #[serde(rename = "1m")]
    Variant1m,
    #[serde(rename = "2m")]
    Variant2m,
    #[serde(rename = "5m")]
    Variant5m,
    #[serde(rename = "10m")]
    Variant10m,
    #[serde(rename = "20m")]
    Variant20m,
    #[serde(rename = "30m")]
    Variant30m,
    #[serde(rename = "2h")]
    Variant2h,
    #[serde(rename = "12h")]
    Variant12h,
    #[serde(rename = "1d")]
    Variant1d,
    #[serde(rename = "7d")]
    Variant7d,
}

impl std::fmt::Display for ValidateFrameAggregateWindow {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Variant10s => write!(f, "10s"),
            Self::Variant1m => write!(f, "1m"),
            Self::Variant2m => write!(f, "2m"),
            Self::Variant5m => write!(f, "5m"),
            Self::Variant10m => write!(f, "10m"),
            Self::Variant20m => write!(f, "20m"),
            Self::Variant30m => write!(f, "30m"),
            Self::Variant2h => write!(f, "2h"),
            Self::Variant12h => write!(f, "12h"),
            Self::Variant1d => write!(f, "1d"),
            Self::Variant7d => write!(f, "7d"),
        }
    }
}

impl Default for ValidateFrameAggregateWindow {
    fn default() -> ValidateFrameAggregateWindow {
        Self::Variant10s
    }
}
