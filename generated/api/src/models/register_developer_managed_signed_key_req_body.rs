/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterDeveloperManagedSignedKeyReqBody {
    /// Ed25519 public key
    #[serde(rename = "public_key")]
    pub public_key: String,
    /// Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signerâ€™s public key
    #[serde(rename = "signature")]
    pub signature: String,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "app_fid")]
    pub app_fid: i32,
    /// unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
    #[serde(rename = "deadline")]
    pub deadline: i32,
    /// Url to redirect to after the signer is approved.  **Note** : This should only be used when requesting a signer from a native mobile application.
    #[serde(rename = "redirect_url", skip_serializing_if = "Option::is_none")]
    pub redirect_url: Option<String>,
    #[serde(rename = "sponsor", skip_serializing_if = "Option::is_none")]
    pub sponsor: Option<Box<models::SignedKeyRequestSponsor>>,
}

impl RegisterDeveloperManagedSignedKeyReqBody {
    pub fn new(
        public_key: String,
        signature: String,
        app_fid: i32,
        deadline: i32,
    ) -> RegisterDeveloperManagedSignedKeyReqBody {
        RegisterDeveloperManagedSignedKeyReqBody {
            public_key,
            signature,
            app_fid,
            deadline,
            redirect_url: None,
            sponsor: None,
        }
    }
}
