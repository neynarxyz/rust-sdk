/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SharedSignerPermission {
    #[serde(rename = "WRITE_ALL")]
    WriteAll,
    #[serde(rename = "READ_ONLY")]
    ReadOnly,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "PUBLISH_CAST")]
    PublishCast,
    #[serde(rename = "DELETE_CAST")]
    DeleteCast,
    #[serde(rename = "PUBLISH_REACTION")]
    PublishReaction,
    #[serde(rename = "DELETE_REACTION")]
    DeleteReaction,
    #[serde(rename = "UPDATE_PROFILE")]
    UpdateProfile,
    #[serde(rename = "FOLLOW_USER")]
    FollowUser,
    #[serde(rename = "UNFOLLOW_USER")]
    UnfollowUser,
    #[serde(rename = "FOLLOW_CHANNEL")]
    FollowChannel,
    #[serde(rename = "UNFOLLOW_CHANNEL")]
    UnfollowChannel,
    #[serde(rename = "ADD_VERIFICATION")]
    AddVerification,
    #[serde(rename = "REMOVE_VERIFICATION")]
    RemoveVerification,
    #[serde(rename = "WRITE_FRAME_ACTION")]
    WriteFrameAction,
}

impl std::fmt::Display for SharedSignerPermission {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::WriteAll => write!(f, "WRITE_ALL"),
            Self::ReadOnly => write!(f, "READ_ONLY"),
            Self::None => write!(f, "NONE"),
            Self::PublishCast => write!(f, "PUBLISH_CAST"),
            Self::DeleteCast => write!(f, "DELETE_CAST"),
            Self::PublishReaction => write!(f, "PUBLISH_REACTION"),
            Self::DeleteReaction => write!(f, "DELETE_REACTION"),
            Self::UpdateProfile => write!(f, "UPDATE_PROFILE"),
            Self::FollowUser => write!(f, "FOLLOW_USER"),
            Self::UnfollowUser => write!(f, "UNFOLLOW_USER"),
            Self::FollowChannel => write!(f, "FOLLOW_CHANNEL"),
            Self::UnfollowChannel => write!(f, "UNFOLLOW_CHANNEL"),
            Self::AddVerification => write!(f, "ADD_VERIFICATION"),
            Self::RemoveVerification => write!(f, "REMOVE_VERIFICATION"),
            Self::WriteFrameAction => write!(f, "WRITE_FRAME_ACTION"),
        }
    }
}

impl Default for SharedSignerPermission {
    fn default() -> SharedSignerPermission {
        Self::WriteAll
    }
}
