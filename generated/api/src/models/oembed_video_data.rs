/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OembedVideoData {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "version", deserialize_with = "Option::deserialize")]
    pub version: Option<String>,
    /// A text title, describing the resource.
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<String>>,
    /// The name of the author/owner of the resource.
    #[serde(
        rename = "author_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub author_name: Option<Option<String>>,
    /// A URL for the author/owner of the resource.
    #[serde(
        rename = "author_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub author_url: Option<Option<String>>,
    /// The name of the resource provider.
    #[serde(
        rename = "provider_name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_name: Option<Option<String>>,
    /// The url of the resource provider.
    #[serde(
        rename = "provider_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_url: Option<Option<String>>,
    /// The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
    #[serde(
        rename = "cache_age",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub cache_age: Option<Option<String>>,
    /// A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
    #[serde(
        rename = "thumbnail_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub thumbnail_url: Option<Option<String>>,
    /// The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
    #[serde(
        rename = "thumbnail_width",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub thumbnail_width: Option<Option<f64>>,
    /// The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
    #[serde(
        rename = "thumbnail_height",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub thumbnail_height: Option<Option<f64>>,
    /// The HTML required to embed a video player. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities.
    #[serde(rename = "html", deserialize_with = "Option::deserialize")]
    pub html: Option<String>,
    /// The width in pixels required to display the HTML.
    #[serde(rename = "width", deserialize_with = "Option::deserialize")]
    pub width: Option<f64>,
    /// The height in pixels required to display the HTML.
    #[serde(rename = "height", deserialize_with = "Option::deserialize")]
    pub height: Option<f64>,
}

impl OembedVideoData {
    pub fn new(
        r#type: Type,
        version: Option<String>,
        html: Option<String>,
        width: Option<f64>,
        height: Option<f64>,
    ) -> OembedVideoData {
        OembedVideoData {
            r#type,
            version,
            title: None,
            author_name: None,
            author_url: None,
            provider_name: None,
            provider_url: None,
            cache_age: None,
            thumbnail_url: None,
            thumbnail_width: None,
            thumbnail_height: None,
            html,
            width,
            height,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "video")]
    Video,
}

impl Default for Type {
    fn default() -> Type {
        Self::Video
    }
}
