/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscribedToObject {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "provider_name")]
    pub provider_name: String,
    #[serde(rename = "contract_address", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    #[serde(rename = "protocol_version", skip_serializing_if = "Option::is_none")]
    pub protocol_version: Option<i32>,
    #[serde(rename = "chain", skip_serializing_if = "Option::is_none")]
    pub chain: Option<i32>,
    #[serde(rename = "expires_at", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    #[serde(rename = "subscribed_at", skip_serializing_if = "Option::is_none")]
    pub subscribed_at: Option<String>,
    #[serde(rename = "tier_id", skip_serializing_if = "Option::is_none")]
    pub tier_id: Option<String>,
}

impl SubscribedToObject {
    pub fn new(object: Object, provider_name: String) -> SubscribedToObject {
        SubscribedToObject {
            object,
            provider_name,
            contract_address: None,
            protocol_version: None,
            chain: None,
            expires_at: None,
            subscribed_at: None,
            tier_id: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "subscription_dehydrated")]
    SubscriptionDehydrated,
}

impl Default for Object {
    fn default() -> Object {
        Self::SubscriptionDehydrated
    }
}
