/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarkNotificationsAsSeenReqBody {
    /// The UUID of the signer. Signer should have atleast one write permission
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: String,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::NotificationType>,
}

impl MarkNotificationsAsSeenReqBody {
    pub fn new(signer_uuid: String) -> MarkNotificationsAsSeenReqBody {
        MarkNotificationsAsSeenReqBody {
            signer_uuid,
            r#type: None,
        }
    }
}
