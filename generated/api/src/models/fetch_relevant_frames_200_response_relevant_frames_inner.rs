/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.41.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FetchRelevantFrames200ResponseRelevantFramesInner {
    /// Array of FrameV2 objects
    #[serde(rename = "frames")]
    pub frames: Vec<models::FrameV2WithFullAuthor>,
    /// Array of the most relevant users
    #[serde(rename = "top_relevant_users")]
    pub top_relevant_users: Vec<models::User>,
    /// Array of remaining relevant users in dehydrated form
    #[serde(rename = "remaining_relevant_users")]
    pub remaining_relevant_users: Vec<models::UserDehydrated>,
}

impl FetchRelevantFrames200ResponseRelevantFramesInner {
    pub fn new(
        frames: Vec<models::FrameV2WithFullAuthor>,
        top_relevant_users: Vec<models::User>,
        remaining_relevant_users: Vec<models::UserDehydrated>,
    ) -> FetchRelevantFrames200ResponseRelevantFramesInner {
        FetchRelevantFrames200ResponseRelevantFramesInner {
            frames,
            top_relevant_users,
            remaining_relevant_users,
        }
    }
}
