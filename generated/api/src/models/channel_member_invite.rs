/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.46.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelMemberInvite {
    /// The unique identifier of a farcaster channel
    #[serde(rename = "channel_id")]
    pub channel_id: String,
    #[serde(rename = "role")]
    pub role: models::ChannelMemberRole,
    #[serde(rename = "inviter")]
    pub inviter: Box<models::User>,
    #[serde(rename = "invited")]
    pub invited: Box<models::User>,
}

impl ChannelMemberInvite {
    pub fn new(
        channel_id: String,
        role: models::ChannelMemberRole,
        inviter: models::User,
        invited: models::User,
    ) -> ChannelMemberInvite {
        ChannelMemberInvite {
            channel_id,
            role,
            inviter: Box::new(inviter),
            invited: Box::new(invited),
        }
    }
}
