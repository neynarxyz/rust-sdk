/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.39.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookPatchReqBody {
    #[serde(rename = "webhook_id")]
    pub webhook_id: String,
    #[serde(rename = "active")]
    pub active: Active,
}

impl WebhookPatchReqBody {
    pub fn new(webhook_id: String, active: Active) -> WebhookPatchReqBody {
        WebhookPatchReqBody { webhook_id, active }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Active {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
}

impl Default for Active {
    fn default() -> Active {
        Self::True
    }
}
