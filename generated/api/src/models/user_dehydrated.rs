/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserDehydrated {
    #[serde(rename = "object")]
    pub object: Object,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "pfp_url", skip_serializing_if = "Option::is_none")]
    pub pfp_url: Option<String>,
    /// Ethereum address
    #[serde(rename = "custody_address", skip_serializing_if = "Option::is_none")]
    pub custody_address: Option<String>,
}

impl UserDehydrated {
    pub fn new(object: Object, fid: i32) -> UserDehydrated {
        UserDehydrated {
            object,
            fid,
            username: None,
            display_name: None,
            pfp_url: None,
            custody_address: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "user_dehydrated")]
    UserDehydrated,
}

impl Default for Object {
    fn default() -> Object {
        Self::UserDehydrated
    }
}
