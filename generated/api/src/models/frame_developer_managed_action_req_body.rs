/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameDeveloperManagedActionReqBody {
    /// Cast Hash
    #[serde(rename = "cast_hash", skip_serializing_if = "Option::is_none")]
    pub cast_hash: Option<String>,
    #[serde(rename = "action")]
    pub action: Box<models::FrameAction>,
    #[serde(rename = "signature_packet")]
    pub signature_packet: Box<models::FrameSignaturePacket>,
}

impl FrameDeveloperManagedActionReqBody {
    pub fn new(
        action: models::FrameAction,
        signature_packet: models::FrameSignaturePacket,
    ) -> FrameDeveloperManagedActionReqBody {
        FrameDeveloperManagedActionReqBody {
            cast_hash: None,
            action: Box::new(action),
            signature_packet: Box::new(signature_packet),
        }
    }
}
