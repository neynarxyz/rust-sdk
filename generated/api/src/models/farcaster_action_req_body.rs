/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FarcasterActionReqBody {
    /// The signer_uuid of the user on behalf of whom the action is being performed.
    #[serde(rename = "signer_uuid")]
    pub signer_uuid: uuid::Uuid,
    /// The base URL of the app on which the action is being performed.
    #[serde(rename = "base_url")]
    pub base_url: String,
    #[serde(rename = "action")]
    pub action: Box<models::FarcasterActionReqBodyAction>,
}

impl FarcasterActionReqBody {
    pub fn new(
        signer_uuid: uuid::Uuid,
        base_url: String,
        action: models::FarcasterActionReqBodyAction,
    ) -> FarcasterActionReqBody {
        FarcasterActionReqBody {
            signer_uuid,
            base_url,
            action: Box::new(action),
        }
    }
}
