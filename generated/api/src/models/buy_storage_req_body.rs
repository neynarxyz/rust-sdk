/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.36.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuyStorageReqBody {
    #[serde(rename = "fid")]
    pub fid: i32,
    /// Number of storage units to buy. A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
    #[serde(rename = "units", skip_serializing_if = "Option::is_none")]
    pub units: Option<i32>,
    /// An Idempotency key is a unique identifier for the request. **Note:**  1) This is used to prevent duplicate requests. Use the same idem key on retry attempts. 2) This should be a unique identifier for each request. 3) Recommended format is a 16-character string generated by the developer at the time of making this request.
    #[serde(rename = "idem", skip_serializing_if = "Option::is_none")]
    pub idem: Option<String>,
}

impl BuyStorageReqBody {
    pub fn new(fid: i32) -> BuyStorageReqBody {
        BuyStorageReqBody {
            fid,
            units: None,
            idem: None,
        }
    }
}
