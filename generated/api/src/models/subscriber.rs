/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscriber {
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "user")]
    pub user: Box<models::User>,
    #[serde(rename = "subscribed_to")]
    pub subscribed_to: Box<models::SubscribedToObject>,
}

impl Subscriber {
    pub fn new(
        object: Object,
        user: models::User,
        subscribed_to: models::SubscribedToObject,
    ) -> Subscriber {
        Subscriber {
            object,
            user: Box::new(user),
            subscribed_to: Box::new(subscribed_to),
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "subscriber")]
    Subscriber,
}

impl Default for Object {
    fn default() -> Object {
        Self::Subscriber
    }
}
