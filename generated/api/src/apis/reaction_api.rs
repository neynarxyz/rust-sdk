/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.44.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`delete_reaction`]
#[derive(Clone, Debug)]
pub struct DeleteReactionParams {
    pub reaction_req_body: models::ReactionReqBody,
}

/// struct for passing parameters to the method [`fetch_cast_reactions`]
#[derive(Clone, Debug)]
pub struct FetchCastReactionsParams {
    pub hash: String,
    /// Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: 'likes' and 'recasts'. By default api returns both. To select multiple types, use a comma-separated list of these values.
    pub types: Vec<models::ReactionsType>,
    /// Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
    pub viewer_fid: Option<i32>,
    /// Number of results to fetch
    pub limit: Option<i32>,
    /// Pagination cursor.
    pub cursor: Option<String>,
}

/// struct for passing parameters to the method [`fetch_user_reactions`]
#[derive(Clone, Debug)]
pub struct FetchUserReactionsParams {
    pub fid: i32,
    /// Type of reaction to fetch (likes or recasts or all)
    pub r#type: models::ReactionsType,
    /// Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
    pub viewer_fid: Option<i32>,
    /// Number of results to fetch
    pub limit: Option<i32>,
    /// Pagination cursor.
    pub cursor: Option<String>,
}

/// struct for passing parameters to the method [`publish_reaction`]
#[derive(Clone, Debug)]
pub struct PublishReactionParams {
    pub reaction_req_body: models::ReactionReqBody,
}

/// struct for typed errors of method [`delete_reaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteReactionError {
    Status400(models::ErrorRes),
    Status403(models::ErrorRes),
    Status404(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_cast_reactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCastReactionsError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_user_reactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUserReactionsError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`publish_reaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PublishReactionError {
    Status400(models::ErrorRes),
    Status403(models::ErrorRes),
    Status404(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// Delete a reaction (like or recast) to a cast \\ (In order to delete a reaction `signer_uuid` must be approved)
pub async fn delete_reaction(
    configuration: &configuration::Configuration,
    params: DeleteReactionParams,
) -> Result<models::OperationResponse, Error<DeleteReactionError>> {
    let uri_str = format!("{}/farcaster/reaction", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    req_builder = req_builder.header(reqwest::header::CONTENT_TYPE, "application/json");
    req_builder = req_builder.json(&params.reaction_req_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OperationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OperationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteReactionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetches reactions for a given cast
pub async fn fetch_cast_reactions(
    configuration: &configuration::Configuration,
    params: FetchCastReactionsParams,
) -> Result<models::ReactionsCastResponse, Error<FetchCastReactionsError>> {
    let uri_str = format!("{}/farcaster/reactions/cast", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("hash", &params.hash.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(
            &params
                .types
                .into_iter()
                .map(|p| ("types".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => req_builder.query(&[(
            "types",
            &params
                .types
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref param_value) = params.viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ReactionsCastResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ReactionsCastResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchCastReactionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetches reactions for a given user
pub async fn fetch_user_reactions(
    configuration: &configuration::Configuration,
    params: FetchUserReactionsParams,
) -> Result<models::ReactionsResponse, Error<FetchUserReactionsError>> {
    let uri_str = format!("{}/farcaster/reactions/user", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("type", &params.r#type.to_string())]);
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ReactionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ReactionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUserReactionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
pub async fn publish_reaction(
    configuration: &configuration::Configuration,
    params: PublishReactionParams,
) -> Result<models::OperationResponse, Error<PublishReactionError>> {
    let uri_str = format!("{}/farcaster/reaction", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    req_builder = req_builder.header(reqwest::header::CONTENT_TYPE, "application/json");
    req_builder = req_builder.json(&params.reaction_req_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OperationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OperationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PublishReactionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
