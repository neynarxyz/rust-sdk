/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.38.2
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`deploy_fungible`]
#[derive(Clone, Debug)]
pub struct DeployFungibleParams {
    /// Ethereum address of the one who is creating the token
    pub owner: String,
    /// Symbol/Ticker for the token
    pub symbol: String,
    /// Name of the token
    pub name: String,
    /// Media file associated with the token.  Supported formats are image/jpeg, image/gif and image/png
    pub metadata_left_square_bracket_media_right_square_bracket: Option<Vec<u8>>,
    /// Description of the token
    pub metadata_left_square_bracket_description_right_square_bracket: Option<String>,
    /// Indicates if the token is NSFW (Not Safe For Work).
    pub metadata_left_square_bracket_nsfw_right_square_bracket: Option<String>,
    /// Website link related to the token
    pub metadata_left_square_bracket_website_link_right_square_bracket: Option<String>,
    /// Twitter profile link
    pub metadata_left_square_bracket_twitter_right_square_bracket: Option<String>,
    /// Discord server link
    pub metadata_left_square_bracket_discord_right_square_bracket: Option<String>,
    /// Telegram link
    pub metadata_left_square_bracket_telegram_right_square_bracket: Option<String>,
    /// Network/Chain name
    pub network: Option<String>,
    /// Factory name - wow -> [wow.xyz](https://wow.xyz) - clanker -> [clanker.world](https://www.clanker.world)
    pub factory: Option<String>,
}

/// struct for passing parameters to the method [`fetch_relevant_fungible_owners`]
#[derive(Clone, Debug)]
pub struct FetchRelevantFungibleOwnersParams {
    /// Contract address of the fungible asset
    pub contract_address: String,
    /// Comma separated list of networks to fetch balances for. Currently, only \"base\" is supported.
    pub networks: Vec<models::Networks>,
    /// If you provide a viewer_fid, the response will include token holders from the user's network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the networkâ€”both sets can be combined to generate a longer list if desired.
    pub viewer_fid: Option<i32>,
}

/// struct for passing parameters to the method [`fetch_user_balance`]
#[derive(Clone, Debug)]
pub struct FetchUserBalanceParams {
    /// FID of the user to fetch
    pub fid: i32,
    /// Comma separated list of networks to fetch balances for. Currently, only \"base\" is supported.
    pub networks: Vec<models::Networks>,
}

/// struct for passing parameters to the method [`register_account_onchain`]
#[derive(Clone, Debug)]
pub struct RegisterAccountOnchainParams {
    pub register_user_on_chain_req_body: models::RegisterUserOnChainReqBody,
}

/// struct for typed errors of method [`deploy_fungible`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeployFungibleError {
    Status400(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_relevant_fungible_owners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRelevantFungibleOwnersError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_user_balance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUserBalanceError {
    Status400(models::ErrorRes),
    Status404(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`register_account_onchain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RegisterAccountOnchainError {
    Status400(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// Creates a new token. This is an allowlisted API, reach out if you want access.
pub async fn deploy_fungible(
    configuration: &configuration::Configuration,
    params: DeployFungibleParams,
) -> Result<models::DeployFungibleResponse, Error<DeployFungibleError>> {
    let uri_str = format!("{}/fungible", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("owner", params.owner.to_string());
    multipart_form = multipart_form.text("symbol", params.symbol.to_string());
    multipart_form = multipart_form.text("name", params.name.to_string());
    // TODO: support file upload for 'metadata[media]' parameter
    if let Some(param_value) = params.metadata_left_square_bracket_description_right_square_bracket
    {
        multipart_form = multipart_form.text("metadata[description]", param_value.to_string());
    }
    if let Some(param_value) = params.metadata_left_square_bracket_nsfw_right_square_bracket {
        multipart_form = multipart_form.text("metadata[nsfw]", param_value.to_string());
    }
    if let Some(param_value) = params.metadata_left_square_bracket_website_link_right_square_bracket
    {
        multipart_form = multipart_form.text("metadata[website_link]", param_value.to_string());
    }
    if let Some(param_value) = params.metadata_left_square_bracket_twitter_right_square_bracket {
        multipart_form = multipart_form.text("metadata[twitter]", param_value.to_string());
    }
    if let Some(param_value) = params.metadata_left_square_bracket_discord_right_square_bracket {
        multipart_form = multipart_form.text("metadata[discord]", param_value.to_string());
    }
    if let Some(param_value) = params.metadata_left_square_bracket_telegram_right_square_bracket {
        multipart_form = multipart_form.text("metadata[telegram]", param_value.to_string());
    }
    if let Some(param_value) = params.network {
        multipart_form = multipart_form.text("network", param_value.to_string());
    }
    if let Some(param_value) = params.factory {
        multipart_form = multipart_form.text("factory", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeployFungibleResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeployFungibleResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeployFungibleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
pub async fn fetch_relevant_fungible_owners(
    configuration: &configuration::Configuration,
    params: FetchRelevantFungibleOwnersParams,
) -> Result<models::RelevantFungibleOwnersResponse, Error<FetchRelevantFungibleOwnersError>> {
    let uri_str = format!(
        "{}/farcaster/fungible/owner/relevant",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("contract_address", &params.contract_address.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(
            &params
                .networks
                .into_iter()
                .map(|p| ("networks".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => req_builder.query(&[(
            "networks",
            &params
                .networks
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref param_value) = params.viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RelevantFungibleOwnersResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RelevantFungibleOwnersResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchRelevantFungibleOwnersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetches the token balances of a user given their FID
pub async fn fetch_user_balance(
    configuration: &configuration::Configuration,
    params: FetchUserBalanceParams,
) -> Result<models::BalanceResponse, Error<FetchUserBalanceError>> {
    let uri_str = format!("{}/farcaster/user/balance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(
            &params
                .networks
                .into_iter()
                .map(|p| ("networks".to_owned(), p.to_string()))
                .collect::<Vec<(std::string::String, std::string::String)>>(),
        ),
        _ => req_builder.query(&[(
            "networks",
            &params
                .networks
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        )]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BalanceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BalanceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUserBalanceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Register a new farcaster account onchain. Optionally you can pass in signers along to register a new account and create multiple signers in a single transaction
pub async fn register_account_onchain(
    configuration: &configuration::Configuration,
    params: RegisterAccountOnchainParams,
) -> Result<models::RegisterUserOnChainResponse, Error<RegisterAccountOnchainError>> {
    let uri_str = format!("{}/farcaster/user/register", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    req_builder = req_builder.header(reqwest::header::CONTENT_TYPE, "application/json");
    req_builder = req_builder.json(&params.register_user_on_chain_req_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegisterUserOnChainResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegisterUserOnChainResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RegisterAccountOnchainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
