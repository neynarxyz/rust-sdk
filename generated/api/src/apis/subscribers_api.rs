/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`fetch_subscribed_to_for_fid`]
#[derive(Clone, Debug)]
pub struct FetchSubscribedToForFidParams {
    pub fid: i32,
    pub subscription_provider: models::SubscriptionProvider,
    pub viewer_fid: Option<i32>
}

/// struct for passing parameters to the method [`fetch_subscribers_for_fid`]
#[derive(Clone, Debug)]
pub struct FetchSubscribersForFidParams {
    pub fid: i32,
    pub subscription_provider: models::SubscriptionProviders,
    pub viewer_fid: Option<i32>
}

/// struct for passing parameters to the method [`fetch_subscription_check`]
#[derive(Clone, Debug)]
pub struct FetchSubscriptionCheckParams {
    /// Comma separated list of Ethereum addresses, up to 350 at a time
    pub addresses: String,
    /// Ethereum address of the STP contract
    pub contract_address: String,
    /// Chain ID of the STP contract
    pub chain_id: String
}

/// struct for passing parameters to the method [`fetch_subscriptions_for_fid`]
#[derive(Clone, Debug)]
pub struct FetchSubscriptionsForFidParams {
    pub fid: i32,
    pub subscription_provider: models::SubscriptionProvider
}


/// struct for typed errors of method [`fetch_subscribed_to_for_fid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSubscribedToForFidError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_subscribers_for_fid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSubscribersForFidError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_subscription_check`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSubscriptionCheckError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_subscriptions_for_fid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSubscriptionsForFidError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}


/// Fetch what FIDs and contracts a FID is subscribed to.
pub async fn fetch_subscribed_to_for_fid(configuration: &configuration::Configuration, params: FetchSubscribedToForFidParams) -> Result<models::SubscribedToResponse, Error<FetchSubscribedToForFidError>> {

    let uri_str = format!("{}/farcaster/user/subscribed_to", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("subscription_provider", &params.subscription_provider.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SubscribedToResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SubscribedToResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSubscribedToForFidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.
pub async fn fetch_subscribers_for_fid(configuration: &configuration::Configuration, params: FetchSubscribersForFidParams) -> Result<models::SubscribersResponse, Error<FetchSubscribersForFidError>> {

    let uri_str = format!("{}/farcaster/user/subscribers", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("subscription_provider", &params.subscription_provider.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SubscribersResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SubscribersResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSubscribersForFidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Check if a wallet address is subscribed to a given STP (Hypersub) contract.
pub async fn fetch_subscription_check(configuration: &configuration::Configuration, params: FetchSubscriptionCheckParams) -> Result<models::SubscriptionCheckResponse, Error<FetchSubscriptionCheckError>> {

    let uri_str = format!("{}/stp/subscription_check", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("addresses", &params.addresses.to_string())]);
    req_builder = req_builder.query(&[("contract_address", &params.contract_address.to_string())]);
    req_builder = req_builder.query(&[("chain_id", &params.chain_id.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SubscriptionCheckResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SubscriptionCheckResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSubscriptionCheckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch created subscriptions for a given FID's.
pub async fn fetch_subscriptions_for_fid(configuration: &configuration::Configuration, params: FetchSubscriptionsForFidParams) -> Result<models::SubscriptionsResponse, Error<FetchSubscriptionsForFidError>> {

    let uri_str = format!("{}/farcaster/user/subscriptions_created", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = req_builder.query(&[("subscription_provider", &params.subscription_provider.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SubscriptionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SubscriptionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSubscriptionsForFidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

