/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.40.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`fetch_all_notifications`]
#[derive(Clone, Debug)]
pub struct FetchAllNotificationsParams {
    /// FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
    pub fid: i32,
    /// Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.
    pub r#type: Option<Vec<models::NotificationType>>,
    /// When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
    pub priority_mode: Option<bool>,
    /// Number of results to fetch
    pub limit: Option<i32>,
    /// Pagination cursor.
    pub cursor: Option<String>,
}

/// struct for passing parameters to the method [`fetch_channel_notifications_for_user`]
#[derive(Clone, Debug)]
pub struct FetchChannelNotificationsForUserParams {
    /// FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
    pub fid: i32,
    /// Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
    pub channel_ids: String,
    /// When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
    pub priority_mode: Option<bool>,
    /// Number of results to fetch
    pub limit: Option<i32>,
    /// Pagination cursor.
    pub cursor: Option<String>,
}

/// struct for passing parameters to the method [`fetch_notifications_by_parent_url_for_user`]
#[derive(Clone, Debug)]
pub struct FetchNotificationsByParentUrlForUserParams {
    /// FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
    pub fid: i32,
    /// Comma separated parent_urls
    pub parent_urls: String,
    /// When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
    pub priority_mode: Option<bool>,
    /// Number of results to fetch
    pub limit: Option<i32>,
    /// Pagination cursor.
    pub cursor: Option<String>,
}

/// struct for passing parameters to the method [`mark_notifications_as_seen`]
#[derive(Clone, Debug)]
pub struct MarkNotificationsAsSeenParams {
    pub mark_notifications_as_seen_req_body: models::MarkNotificationsAsSeenReqBody,
}

/// struct for typed errors of method [`fetch_all_notifications`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchAllNotificationsError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_channel_notifications_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchChannelNotificationsForUserError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_notifications_by_parent_url_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchNotificationsByParentUrlForUserError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mark_notifications_as_seen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MarkNotificationsAsSeenError {
    Status400(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// Returns a list of notifications for a specific FID.
pub async fn fetch_all_notifications(
    configuration: &configuration::Configuration,
    params: FetchAllNotificationsParams,
) -> Result<models::NotificationsResponse, Error<FetchAllNotificationsError>> {
    let uri_str = format!("{}/farcaster/notifications", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.r#type {
        req_builder = match "csv" {
            "multi" => req_builder.query(
                &param_value
                    .into_iter()
                    .map(|p| ("type".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => req_builder.query(&[(
                "type",
                &param_value
                    .into_iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref param_value) = params.priority_mode {
        req_builder = req_builder.query(&[("priority_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NotificationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NotificationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchAllNotificationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns a list of notifications for a user in specific channels
pub async fn fetch_channel_notifications_for_user(
    configuration: &configuration::Configuration,
    params: FetchChannelNotificationsForUserParams,
) -> Result<models::NotificationsResponse, Error<FetchChannelNotificationsForUserError>> {
    let uri_str = format!(
        "{}/farcaster/notifications/channel",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = req_builder.query(&[("channel_ids", &params.channel_ids.to_string())]);
    if let Some(ref param_value) = params.priority_mode {
        req_builder = req_builder.query(&[("priority_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NotificationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NotificationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchChannelNotificationsForUserError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns a list of notifications for a user in specific parent_urls
pub async fn fetch_notifications_by_parent_url_for_user(
    configuration: &configuration::Configuration,
    params: FetchNotificationsByParentUrlForUserParams,
) -> Result<models::NotificationsResponse, Error<FetchNotificationsByParentUrlForUserError>> {
    let uri_str = format!(
        "{}/farcaster/notifications/parent_url",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = req_builder.query(&[("parent_urls", &params.parent_urls.to_string())]);
    if let Some(ref param_value) = params.priority_mode {
        req_builder = req_builder.query(&[("priority_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NotificationsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NotificationsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchNotificationsByParentUrlForUserError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Mark notifications as seen
pub async fn mark_notifications_as_seen(
    configuration: &configuration::Configuration,
    params: MarkNotificationsAsSeenParams,
) -> Result<models::OperationResponse, Error<MarkNotificationsAsSeenError>> {
    let uri_str = format!("{}/farcaster/notifications/seen", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    req_builder = req_builder.header(reqwest::header::CONTENT_TYPE, "application/json");
    req_builder = req_builder.json(&params.mark_notifications_as_seen_req_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OperationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OperationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MarkNotificationsAsSeenError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
