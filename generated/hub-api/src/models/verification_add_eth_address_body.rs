/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// VerificationAddEthAddressBody : Contains the data required to verify ownership of an Ethereum or Solana address. The verification process requires a cryptographic signature from the blockchain address and includes the block hash at the time of signing for timestamp verification.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerificationAddEthAddressBody {
    /// The Ethereum (0x-prefixed) or Solana address that the user is claiming ownership of. Must match the address that produced the signature.
    #[serde(rename = "address")]
    pub address: String,
    /// Base64-encoded signature produced by the blockchain address, proving ownership. For Ethereum, this is an ECDSA signature of a specific message format.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "ethSignature")]
    pub eth_signature: Vec<u8>,
    /// The hash of the most recent block when the signature was created. Used to verify the approximate time of signature creation.
    #[serde(rename = "blockHash")]
    pub block_hash: String,
}

impl VerificationAddEthAddressBody {
    /// Contains the data required to verify ownership of an Ethereum or Solana address. The verification process requires a cryptographic signature from the blockchain address and includes the block hash at the time of signing for timestamp verification.
    pub fn new(
        address: String,
        eth_signature: Vec<u8>,
        block_hash: String,
    ) -> VerificationAddEthAddressBody {
        VerificationAddEthAddressBody {
            address,
            eth_signature,
            block_hash,
        }
    }
}
