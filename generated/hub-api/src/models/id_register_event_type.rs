/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdRegisterEventType {
    #[serde(rename = "ID_REGISTER_EVENT_TYPE_REGISTER")]
    IdRegisterEventTypeRegister,
    #[serde(rename = "ID_REGISTER_EVENT_TYPE_TRANSFER")]
    IdRegisterEventTypeTransfer,
    #[serde(rename = "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY")]
    IdRegisterEventTypeChangeRecovery,

}

impl std::fmt::Display for IdRegisterEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::IdRegisterEventTypeRegister => write!(f, "ID_REGISTER_EVENT_TYPE_REGISTER"),
            Self::IdRegisterEventTypeTransfer => write!(f, "ID_REGISTER_EVENT_TYPE_TRANSFER"),
            Self::IdRegisterEventTypeChangeRecovery => write!(f, "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY"),
        }
    }
}

impl Default for IdRegisterEventType {
    fn default() -> IdRegisterEventType {
        Self::IdRegisterEventTypeRegister
    }
}

