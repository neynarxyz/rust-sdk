/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OnChainEventStorageRent {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "chainId")]
    pub chain_id: i32,
    #[serde(rename = "blockNumber")]
    pub block_number: i32,
    #[serde(rename = "blockHash")]
    pub block_hash: String,
    #[serde(rename = "blockTimestamp")]
    pub block_timestamp: i32,
    #[serde(rename = "transactionHash")]
    pub transaction_hash: String,
    #[serde(rename = "logIndex")]
    pub log_index: i32,
    #[serde(rename = "txIndex")]
    pub tx_index: i32,
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "storageRentEventBody")]
    pub storage_rent_event_body: Box<models::StorageRentEventBody>,
}

impl OnChainEventStorageRent {
    pub fn new(
        r#type: String,
        chain_id: i32,
        block_number: i32,
        block_hash: String,
        block_timestamp: i32,
        transaction_hash: String,
        log_index: i32,
        tx_index: i32,
        fid: i32,
        storage_rent_event_body: models::StorageRentEventBody,
    ) -> OnChainEventStorageRent {
        OnChainEventStorageRent {
            r#type,
            chain_id,
            block_number,
            block_hash,
            block_timestamp,
            transaction_hash,
            log_index,
            tx_index,
            fid,
            storage_rent_event_body: Box::new(storage_rent_event_body),
        }
    }
}
