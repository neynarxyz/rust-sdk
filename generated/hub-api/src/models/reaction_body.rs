/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReactionBody : Specifies the details of a reaction to content on Farcaster. A reaction must specify its type (like/recast) and either a target cast ID or URL to react to. Only one target (either castId or URL) should be specified per reaction.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReactionBody {
    #[serde(rename = "type")]
    pub r#type: models::ReactionType,
    /// The unique identifier of the cast being reacted to. Must be a valid CastId containing the creator's FID and the cast's hash.
    #[serde(rename = "targetCastId", skip_serializing_if = "Option::is_none")]
    pub target_cast_id: Option<Box<models::CastId>>,
    /// The URL being reacted to. Used when reacting to external content or when the cast ID is not available.
    #[serde(rename = "targetUrl", skip_serializing_if = "Option::is_none")]
    pub target_url: Option<String>,
}

impl ReactionBody {
    /// Specifies the details of a reaction to content on Farcaster. A reaction must specify its type (like/recast) and either a target cast ID or URL to react to. Only one target (either castId or URL) should be specified per reaction.
    pub fn new(r#type: models::ReactionType) -> ReactionBody {
        ReactionBody {
            r#type,
            target_cast_id: None,
            target_url: None,
        }
    }
}

