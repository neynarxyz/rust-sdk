/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageDataCommon : Common properties shared by all Farcaster message types. These properties provide essential metadata about the message's origin, timing, and network context.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MessageDataCommon {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::MessageType>,
    /// The unique identifier (FID) of the user who created this message. FIDs are assigned sequentially when users register on the network and cannot be changed.
    #[serde(rename = "fid")]
    pub fid: i32,
    /// Seconds since Farcaster Epoch (2021-01-01T00:00:00Z). Used to order messages chronologically and determine the most recent state. Must be within 10 minutes of the current time when the message is created.
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    #[serde(rename = "network")]
    pub network: models::FarcasterNetwork,
}

impl MessageDataCommon {
    /// Common properties shared by all Farcaster message types. These properties provide essential metadata about the message's origin, timing, and network context.
    pub fn new(fid: i32, timestamp: i64, network: models::FarcasterNetwork) -> MessageDataCommon {
        MessageDataCommon {
            r#type: None,
            fid,
            timestamp,
            network,
        }
    }
}
