/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FrameActionBody : Contains the data for a user's interaction with a Farcaster Frame. Frames are interactive elements within casts that can have up to 4 clickable buttons, allowing users to engage with content in predefined ways.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameActionBody {
    /// The URL associated with the frame action. This typically points to the frame's content or the destination that handles the interaction.
    #[serde(rename = "url")]
    pub url: String,
    /// Identifies which button the user clicked in the frame. Frames can have up to 4 buttons, numbered from 1 to 4.
    #[serde(rename = "buttonIndex")]
    pub button_index: i32,
    /// The unique identifier of the cast containing the frame that was interacted with.
    #[serde(rename = "castId")]
    pub cast_id: Box<models::CastId>,
}

impl FrameActionBody {
    /// Contains the data for a user's interaction with a Farcaster Frame. Frames are interactive elements within casts that can have up to 4 clickable buttons, allowing users to engage with content in predefined ways.
    pub fn new(url: String, button_index: i32, cast_id: models::CastId) -> FrameActionBody {
        FrameActionBody {
            url,
            button_index,
            cast_id: Box::new(cast_id),
        }
    }
}
