/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReactionAllOfData {
    /// The unique identifier (FID) of the user who created this message. FIDs are assigned sequentially when users register on the network and cannot be changed.
    #[serde(rename = "fid")]
    pub fid: i32,
    /// Seconds since Farcaster Epoch (2021-01-01T00:00:00Z). Used to order messages chronologically and determine the most recent state. Must be within 10 minutes of the current time when the message is created.
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    #[serde(rename = "network")]
    pub network: models::FarcasterNetwork,
    /// Contains the type of reaction (like/recast) and the target content being reacted to. The target can be specified either by castId or URL.
    #[serde(rename = "reactionBody")]
    pub reaction_body: Box<models::ReactionBody>,
    #[serde(rename = "type")]
    pub r#type: models::MessageType,
}

impl ReactionAllOfData {
    pub fn new(
        fid: i32,
        timestamp: i64,
        network: models::FarcasterNetwork,
        reaction_body: models::ReactionBody,
        r#type: models::MessageType,
    ) -> ReactionAllOfData {
        ReactionAllOfData {
            fid,
            timestamp,
            network,
            reaction_body: Box::new(reaction_body),
            r#type,
        }
    }
}
