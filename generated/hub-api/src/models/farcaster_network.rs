/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FarcasterNetwork : Farcaster network the message is intended for. - FARCASTER_NETWORK_MAINNET: Public primary network - FARCASTER_NETWORK_TESTNET: Public test network - FARCASTER_NETWORK_DEVNET: Private test network
/// Farcaster network the message is intended for. - FARCASTER_NETWORK_MAINNET: Public primary network - FARCASTER_NETWORK_TESTNET: Public test network - FARCASTER_NETWORK_DEVNET: Private test network
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FarcasterNetwork {
    #[serde(rename = "FARCASTER_NETWORK_MAINNET")]
    FarcasterNetworkMainnet,
    #[serde(rename = "FARCASTER_NETWORK_TESTNET")]
    FarcasterNetworkTestnet,
    #[serde(rename = "FARCASTER_NETWORK_DEVNET")]
    FarcasterNetworkDevnet,
}

impl std::fmt::Display for FarcasterNetwork {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FarcasterNetworkMainnet => write!(f, "FARCASTER_NETWORK_MAINNET"),
            Self::FarcasterNetworkTestnet => write!(f, "FARCASTER_NETWORK_TESTNET"),
            Self::FarcasterNetworkDevnet => write!(f, "FARCASTER_NETWORK_DEVNET"),
        }
    }
}

impl Default for FarcasterNetwork {
    fn default() -> FarcasterNetwork {
        Self::FarcasterNetworkMainnet
    }
}
