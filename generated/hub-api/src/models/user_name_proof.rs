/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserNameProof {
    /// Seconds since Unix Epoch which began on Jan 1, 1970 00:00:00 UTC
    #[serde(rename = "timestamp")]
    pub timestamp: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "owner")]
    pub owner: String,
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "signature")]
    pub signature: Vec<u8>,
    /// The FID of the user who owns this username proof
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "type")]
    pub r#type: models::UserNameType,
}

impl UserNameProof {
    pub fn new(
        timestamp: i32,
        name: String,
        owner: String,
        signature: Vec<u8>,
        fid: i32,
        r#type: models::UserNameType,
    ) -> UserNameProof {
        UserNameProof {
            timestamp,
            name,
            owner,
            signature,
            fid,
            r#type,
        }
    }
}
