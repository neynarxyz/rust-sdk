/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StoreType {
    #[serde(rename = "STORE_TYPE_CASTS")]
    StoreTypeCasts,
    #[serde(rename = "STORE_TYPE_LINKS")]
    StoreTypeLinks,
    #[serde(rename = "STORE_TYPE_REACTIONS")]
    StoreTypeReactions,
    #[serde(rename = "STORE_TYPE_USER_DATA")]
    StoreTypeUserData,
    #[serde(rename = "STORE_TYPE_VERIFICATIONS")]
    StoreTypeVerifications,
    #[serde(rename = "STORE_TYPE_USERNAME_PROOFS")]
    StoreTypeUsernameProofs,
}

impl std::fmt::Display for StoreType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::StoreTypeCasts => write!(f, "STORE_TYPE_CASTS"),
            Self::StoreTypeLinks => write!(f, "STORE_TYPE_LINKS"),
            Self::StoreTypeReactions => write!(f, "STORE_TYPE_REACTIONS"),
            Self::StoreTypeUserData => write!(f, "STORE_TYPE_USER_DATA"),
            Self::StoreTypeVerifications => write!(f, "STORE_TYPE_VERIFICATIONS"),
            Self::StoreTypeUsernameProofs => write!(f, "STORE_TYPE_USERNAME_PROOFS"),
        }
    }
}

impl Default for StoreType {
    fn default() -> StoreType {
        Self::StoreTypeCasts
    }
}
