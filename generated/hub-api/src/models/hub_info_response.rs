/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.35.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HubInfoResponse {
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "isSyncing")]
    pub is_syncing: bool,
    #[serde(rename = "nickname")]
    pub nickname: String,
    #[serde(rename = "rootHash")]
    pub root_hash: String,
    #[serde(rename = "dbStats", skip_serializing_if = "Option::is_none")]
    pub db_stats: Option<Box<models::DbStats>>,
    #[serde(rename = "peerId")]
    pub peer_id: String,
    #[serde(rename = "hubOperatorFid")]
    pub hub_operator_fid: i32,
}

impl HubInfoResponse {
    pub fn new(
        version: String,
        is_syncing: bool,
        nickname: String,
        root_hash: String,
        peer_id: String,
        hub_operator_fid: i32,
    ) -> HubInfoResponse {
        HubInfoResponse {
            version,
            is_syncing,
            nickname,
            root_hash,
            db_stats: None,
            peer_id,
            hub_operator_fid,
        }
    }
}
