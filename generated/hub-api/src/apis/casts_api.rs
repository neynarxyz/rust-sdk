/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`fetch_casts_by_parent`]
#[derive(Clone, Debug)]
pub struct FetchCastsByParentParams {
    /// The Farcaster ID (FID) of the parent cast's creator. This parameter must be used together with the 'hash' parameter to uniquely identify a parent cast. Required only when using hash-based lookup instead of URL-based lookup. The FID is a unique identifier assigned to each Farcaster user.
    pub fid: Option<i32>,
    /// The unique hash identifier of the parent cast. Must be used together with the 'fid' parameter when doing hash-based lookup. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies the cast within the creator's posts. Not required if using URL-based lookup.
    pub hash: Option<String>,
    /// Cast URL starting with 'chain://'
    pub url: Option<String>,
    /// Maximum number of messages to return in a single response
    pub page_size: Option<i32>,
    /// Reverse the sort order, returning latest messages first
    pub reverse: Option<bool>,
    /// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`fetch_casts_mentioning_user`]
#[derive(Clone, Debug)]
pub struct FetchCastsMentioningUserParams {
    /// The FID that is mentioned in a cast
    pub fid: i32,
    /// Maximum number of messages to return in a single response
    pub page_size: Option<i32>,
    /// Reverse the sort order, returning latest messages first
    pub reverse: Option<bool>,
    /// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`fetch_users_casts`]
#[derive(Clone, Debug)]
pub struct FetchUsersCastsParams {
    /// The FID of the casts' creator
    pub fid: i32,
    /// Maximum number of messages to return in a single response
    pub page_size: Option<i32>,
    /// Reverse the sort order, returning latest messages first
    pub reverse: Option<bool>,
    /// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`lookup_cast_by_hash_and_fid`]
#[derive(Clone, Debug)]
pub struct LookupCastByHashAndFidParams {
    /// The FID of the cast's creator
    pub fid: i32,
    /// The unique hash identifier of the cast. This is a 40-character hexadecimal string prefixed with '0x' that uniquely identifies a specific cast in the Farcaster network.
    pub hash: String
}


/// struct for typed errors of method [`fetch_casts_by_parent`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCastsByParentError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_casts_mentioning_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCastsMentioningUserError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_users_casts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUsersCastsError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`lookup_cast_by_hash_and_fid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LookupCastByHashAndFidError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.
pub async fn fetch_casts_by_parent(configuration: &configuration::Configuration, params: FetchCastsByParentParams) -> Result<models::FetchCastsByParent200Response, Error<FetchCastsByParentError>> {

    let uri_str = format!("{}/v1/castsByParent", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.fid {
        req_builder = req_builder.query(&[("fid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.hash {
        req_builder = req_builder.query(&[("hash", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.url {
        req_builder = req_builder.query(&[("url", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.reverse {
        req_builder = req_builder.query(&[("reverse", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("pageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FetchCastsByParent200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FetchCastsByParent200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchCastsByParentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch casts mentioning a user.
pub async fn fetch_casts_mentioning_user(configuration: &configuration::Configuration, params: FetchCastsMentioningUserParams) -> Result<models::FetchCastsMentioningUser200Response, Error<FetchCastsMentioningUserError>> {

    let uri_str = format!("{}/v1/castsByMention", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.reverse {
        req_builder = req_builder.query(&[("reverse", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("pageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FetchCastsMentioningUser200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FetchCastsMentioningUser200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchCastsMentioningUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch user's casts.
pub async fn fetch_users_casts(configuration: &configuration::Configuration, params: FetchUsersCastsParams) -> Result<models::FetchUsersCasts200Response, Error<FetchUsersCastsError>> {

    let uri_str = format!("{}/v1/castsByFid", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.reverse {
        req_builder = req_builder.query(&[("reverse", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("pageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FetchUsersCasts200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FetchUsersCasts200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUsersCastsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lookup a cast by its FID and hash.
pub async fn lookup_cast_by_hash_and_fid(configuration: &configuration::Configuration, params: LookupCastByHashAndFidParams) -> Result<models::CastAdd, Error<LookupCastByHashAndFidError>> {

    let uri_str = format!("{}/v1/castById", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = req_builder.query(&[("hash", &params.hash.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CastAdd`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CastAdd`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LookupCastByHashAndFidError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

