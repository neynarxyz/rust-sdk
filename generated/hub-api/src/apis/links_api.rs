/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`fetch_user_followers`]
#[derive(Clone, Debug)]
pub struct FetchUserFollowersParams {
    /// The FID of the target user for this link
    pub target_fid: i32,
    pub link_type: Option<models::LinkType>,
    /// Maximum number of messages to return in a single response
    pub page_size: Option<i32>,
    /// Reverse the sort order, returning latest messages first
    pub reverse: Option<bool>,
    /// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`fetch_user_following`]
#[derive(Clone, Debug)]
pub struct FetchUserFollowingParams {
    /// The FID of the link's originator
    pub fid: i32,
    pub link_type: Option<models::LinkType>,
    /// Maximum number of messages to return in a single response
    pub page_size: Option<i32>,
    /// Reverse the sort order, returning latest messages first
    pub reverse: Option<bool>,
    /// The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`lookup_user_relation`]
#[derive(Clone, Debug)]
pub struct LookupUserRelationParams {
    /// The FID of the link's originator
    pub fid: i32,
    /// The FID of the target user for this link
    pub target_fid: i32,
    pub link_type: models::LinkType,
}

/// struct for typed errors of method [`fetch_user_followers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUserFollowersError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_user_following`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUserFollowingError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`lookup_user_relation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LookupUserRelationError {
    DefaultResponse(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Fetch a list of users that are following a user.
pub async fn fetch_user_followers(
    configuration: &configuration::Configuration,
    params: FetchUserFollowersParams,
) -> Result<models::FetchUserFollowers200Response, Error<FetchUserFollowersError>> {
    let uri_str = format!("{}/v1/linksByTargetFid", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("target_fid", &params.target_fid.to_string())]);
    if let Some(ref param_value) = params.link_type {
        req_builder = req_builder.query(&[("link_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.reverse {
        req_builder = req_builder.query(&[("reverse", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("pageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FetchUserFollowers200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FetchUserFollowers200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUserFollowersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch a list of users that a user is following.
pub async fn fetch_user_following(
    configuration: &configuration::Configuration,
    params: FetchUserFollowingParams,
) -> Result<models::FetchUserFollowing200Response, Error<FetchUserFollowingError>> {
    let uri_str = format!("{}/v1/linksByFid", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    if let Some(ref param_value) = params.link_type {
        req_builder = req_builder.query(&[("link_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.reverse {
        req_builder = req_builder.query(&[("reverse", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("pageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FetchUserFollowing200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FetchUserFollowing200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUserFollowingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Lookup a link by its FID and target FID.
pub async fn lookup_user_relation(
    configuration: &configuration::Configuration,
    params: LookupUserRelationParams,
) -> Result<models::LinkAdd, Error<LookupUserRelationError>> {
    let uri_str = format!("{}/v1/linkById", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &params.fid.to_string())]);
    req_builder = req_builder.query(&[("target_fid", &params.target_fid.to_string())]);
    req_builder = req_builder.query(&[("link_type", &params.link_type.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::LinkAdd`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::LinkAdd`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LookupUserRelationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
