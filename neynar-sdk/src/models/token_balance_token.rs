/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenBalanceToken {
    #[serde(rename = "object")]
    pub object: Object,
    /// The token name e.g. \"Ethereum\"
    #[serde(rename = "name")]
    pub name: String,
    /// The token symbol e.g. \"ETH\"
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The contract address of the token (omitted for native token)
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The number of decimals the token uses
    #[serde(rename = "decimals", skip_serializing_if = "Option::is_none")]
    pub decimals: Option<i32>,
}

impl TokenBalanceToken {
    pub fn new(object: Object, name: String, symbol: String) -> TokenBalanceToken {
        TokenBalanceToken {
            object,
            name,
            symbol,
            address: None,
            decimals: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "token")]
    Token,
}

impl Default for Object {
    fn default() -> Object {
        Self::Token
    }
}

