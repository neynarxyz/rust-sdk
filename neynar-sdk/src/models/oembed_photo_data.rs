/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OembedPhotoData {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "version")]
    pub version: String,
    /// A text title, describing the resource.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The name of the author/owner of the resource.
    #[serde(rename = "author_name", skip_serializing_if = "Option::is_none")]
    pub author_name: Option<String>,
    /// A URL for the author/owner of the resource.
    #[serde(rename = "author_url", skip_serializing_if = "Option::is_none")]
    pub author_url: Option<String>,
    /// The name of the resource provider.
    #[serde(rename = "provider_name", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<String>,
    /// The url of the resource provider.
    #[serde(rename = "provider_url", skip_serializing_if = "Option::is_none")]
    pub provider_url: Option<String>,
    /// The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
    #[serde(rename = "cache_age", skip_serializing_if = "Option::is_none")]
    pub cache_age: Option<String>,
    /// A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
    #[serde(rename = "thumbnail_url", skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
    #[serde(rename = "thumbnail_width", skip_serializing_if = "Option::is_none")]
    pub thumbnail_width: Option<f64>,
    /// The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
    #[serde(rename = "thumbnail_height", skip_serializing_if = "Option::is_none")]
    pub thumbnail_height: Option<f64>,
    /// The source URL of the image. Consumers should be able to insert this URL into an <img> element. Only HTTP and HTTPS URLs are valid.
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<String>,
    /// The width in pixels of the image specified in the url parameter.
    #[serde(rename = "width", deserialize_with = "Option::deserialize")]
    pub width: Option<f64>,
    /// The height in pixels of the image specified in the url parameter.
    #[serde(rename = "height", deserialize_with = "Option::deserialize")]
    pub height: Option<f64>,
}

impl OembedPhotoData {
    pub fn new(r#type: Type, version: String, url: Option<String>, width: Option<f64>, height: Option<f64>) -> OembedPhotoData {
        OembedPhotoData {
            r#type,
            version,
            title: None,
            author_name: None,
            author_url: None,
            provider_name: None,
            provider_url: None,
            cache_age: None,
            thumbnail_url: None,
            thumbnail_width: None,
            thumbnail_height: None,
            url,
            width,
            height,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "photo")]
    Photo,
}

impl Default for Type {
    fn default() -> Type {
        Self::Photo
    }
}

