/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CastViewerContext : Adds context on interactions the viewer has made with the cast.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CastViewerContext {
    /// Indicates if the viewer liked the cast.
    #[serde(rename = "liked")]
    pub liked: bool,
    /// Indicates if the viewer recasted the cast.
    #[serde(rename = "recasted")]
    pub recasted: bool,
}

impl CastViewerContext {
    /// Adds context on interactions the viewer has made with the cast.
    pub fn new(liked: bool, recasted: bool) -> CastViewerContext {
        CastViewerContext {
            liked,
            recasted,
        }
    }
}

