/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FarcasterManifestFrame {
    #[serde(rename = "version")]
    pub version: Version,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "home_url")]
    pub home_url: String,
    #[serde(rename = "icon_url")]
    pub icon_url: String,
    #[serde(rename = "image_url", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(rename = "button_title", skip_serializing_if = "Option::is_none")]
    pub button_title: Option<String>,
    #[serde(rename = "splash_image_url", skip_serializing_if = "Option::is_none")]
    pub splash_image_url: Option<String>,
    #[serde(rename = "splash_background_color", skip_serializing_if = "Option::is_none")]
    pub splash_background_color: Option<String>,
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
}

impl FarcasterManifestFrame {
    pub fn new(version: Version, name: String, home_url: String, icon_url: String) -> FarcasterManifestFrame {
        FarcasterManifestFrame {
            version,
            name,
            home_url,
            icon_url,
            image_url: None,
            button_title: None,
            splash_image_url: None,
            splash_background_color: None,
            webhook_url: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "0.0.0")]
    Variant0Period0Period0,
    #[serde(rename = "0.0.1")]
    Variant0Period0Period1,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "next")]
    Next,
}

impl Default for Version {
    fn default() -> Version {
        Self::Variant0Period0Period0
    }
}

