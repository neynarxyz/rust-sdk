/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FrameV1 : Mini app v1 object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FrameV1 {
    /// Version of the mini app, 'next' for v2, 'vNext' for v1
    #[serde(rename = "version")]
    pub version: String,
    /// URL of the image
    #[serde(rename = "image")]
    pub image: String,
    /// Launch URL of the mini app
    #[serde(rename = "frames_url")]
    pub frames_url: String,
    #[serde(rename = "buttons", skip_serializing_if = "Option::is_none")]
    pub buttons: Option<Vec<models::FrameActionButton>>,
    /// Post URL to take an action on this mini app
    #[serde(rename = "post_url", skip_serializing_if = "Option::is_none")]
    pub post_url: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "image_aspect_ratio", skip_serializing_if = "Option::is_none")]
    pub image_aspect_ratio: Option<String>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<Box<models::FrameV1AllOfInput>>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<models::FrameV1AllOfState>>,
}

impl FrameV1 {
    /// Mini app v1 object
    pub fn new(version: String, image: String, frames_url: String) -> FrameV1 {
        FrameV1 {
            version,
            image,
            frames_url,
            buttons: None,
            post_url: None,
            title: None,
            image_aspect_ratio: None,
            input: None,
            state: None,
        }
    }
}

