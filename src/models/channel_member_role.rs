/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChannelMemberRole : The role of a channel member
/// The role of a channel member
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChannelMemberRole {
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "moderator")]
    Moderator,

}

impl std::fmt::Display for ChannelMemberRole {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Member => write!(f, "member"),
            Self::Moderator => write!(f, "moderator"),
        }
    }
}

impl Default for ChannelMemberRole {
    fn default() -> ChannelMemberRole {
        Self::Member
    }
}

