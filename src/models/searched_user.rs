/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchedUser {
    #[serde(rename = "object")]
    pub object: Object,
    /// The unique identifier of a farcaster user (unsigned integer)
    #[serde(rename = "fid")]
    pub fid: i32,
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Ethereum address
    #[serde(rename = "custody_address")]
    pub custody_address: String,
    /// The URL of the user's profile picture
    #[serde(rename = "pfp_url", skip_serializing_if = "Option::is_none")]
    pub pfp_url: Option<String>,
    #[serde(rename = "profile")]
    pub profile: Box<models::UserProfile>,
    /// The number of followers the user has.
    #[serde(rename = "follower_count")]
    pub follower_count: i32,
    /// The number of users the user is following.
    #[serde(rename = "following_count")]
    pub following_count: i32,
    #[serde(rename = "verifications")]
    pub verifications: Vec<String>,
    #[serde(rename = "verified_addresses")]
    pub verified_addresses: Box<models::UserVerifiedAddresses>,
    /// Verified accounts of the user on other platforms, currently only X is supported.
    #[serde(rename = "verified_accounts")]
    pub verified_accounts: Vec<models::UserVerifiedAccountsInner>,
    #[serde(rename = "power_badge")]
    pub power_badge: bool,
    #[serde(rename = "experimental", skip_serializing_if = "Option::is_none")]
    pub experimental: Option<Box<models::UserExperimental>>,
    /// Score that represents the probability that the account is not spam.
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "viewer_context", skip_serializing_if = "Option::is_none")]
    pub viewer_context: Option<Box<models::UserViewerContext>>,
    #[serde(rename = "pfp")]
    pub pfp: Box<models::ProfileUrlPfp>,
}

impl SearchedUser {
    pub fn new(object: Object, fid: i32, username: String, custody_address: String, profile: models::UserProfile, follower_count: i32, following_count: i32, verifications: Vec<String>, verified_addresses: models::UserVerifiedAddresses, verified_accounts: Vec<models::UserVerifiedAccountsInner>, power_badge: bool, score: f64, pfp: models::ProfileUrlPfp) -> SearchedUser {
        SearchedUser {
            object,
            fid,
            username,
            display_name: None,
            custody_address,
            pfp_url: None,
            profile: Box::new(profile),
            follower_count,
            following_count,
            verifications,
            verified_addresses: Box::new(verified_addresses),
            verified_accounts,
            power_badge,
            experimental: None,
            score,
            viewer_context: None,
            pfp: Box::new(pfp),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "user")]
    User,
}

impl Default for Object {
    fn default() -> Object {
        Self::User
    }
}

