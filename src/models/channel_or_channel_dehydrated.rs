/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "object")]
pub enum ChannelOrChannelDehydrated {
    #[serde(rename="channel")]
    Channel(Box<models::Channel>),
    #[serde(rename="channel_dehydrated")]
    ChannelDehydrated(Box<models::ChannelDehydrated>),
}

impl Default for ChannelOrChannelDehydrated {
    fn default() -> Self {
        Self::Channel(Default::default())
    }
}


