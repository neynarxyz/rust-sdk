/*
 * Farcaster API V2
 *
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.33.1
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`deploy_fungible`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeployFungibleError {
    Status400(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_relevant_fungible_owners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRelevantFungibleOwnersError {
    Status400(models::ErrorRes),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_user_balance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUserBalanceError {
    Status400(models::ErrorRes),
    Status404(models::ErrorRes),
    Status500(models::ErrorRes),
    UnknownValue(serde_json::Value),
}


/// Creates a new token. This is an allowlisted API, reach out if you want access. 
pub async fn deploy_fungible(configuration: &configuration::Configuration, owner: &str, symbol: &str, name: &str, metadata_left_square_bracket_media_right_square_bracket: Option<models::models::DeployFungibleReqBodyMetadataMedia>, metadata_left_square_bracket_description_right_square_bracket: Option<&str>, metadata_left_square_bracket_nsfw_right_square_bracket: Option<&str>, metadata_left_square_bracket_website_link_right_square_bracket: Option<&str>, metadata_left_square_bracket_twitter_right_square_bracket: Option<&str>, metadata_left_square_bracket_discord_right_square_bracket: Option<&str>, metadata_left_square_bracket_telegram_right_square_bracket: Option<&str>, network: Option<&str>, factory: Option<&str>) -> Result<models::DeployFungibleResponse, Error<DeployFungibleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_symbol = symbol;
    let p_name = name;
    let p_metadata_left_square_bracket_media_right_square_bracket = metadata_left_square_bracket_media_right_square_bracket;
    let p_metadata_left_square_bracket_description_right_square_bracket = metadata_left_square_bracket_description_right_square_bracket;
    let p_metadata_left_square_bracket_nsfw_right_square_bracket = metadata_left_square_bracket_nsfw_right_square_bracket;
    let p_metadata_left_square_bracket_website_link_right_square_bracket = metadata_left_square_bracket_website_link_right_square_bracket;
    let p_metadata_left_square_bracket_twitter_right_square_bracket = metadata_left_square_bracket_twitter_right_square_bracket;
    let p_metadata_left_square_bracket_discord_right_square_bracket = metadata_left_square_bracket_discord_right_square_bracket;
    let p_metadata_left_square_bracket_telegram_right_square_bracket = metadata_left_square_bracket_telegram_right_square_bracket;
    let p_network = network;
    let p_factory = factory;

    let uri_str = format!("{}/fungible", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("owner", p_owner.to_string());
    multipart_form = multipart_form.text("symbol", p_symbol.to_string());
    multipart_form = multipart_form.text("name", p_name.to_string());
    if let Some(param_value) = p_metadata_left_square_bracket_media_right_square_bracket {
        multipart_form = multipart_form.text("metadata[media]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_description_right_square_bracket {
        multipart_form = multipart_form.text("metadata[description]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_nsfw_right_square_bracket {
        multipart_form = multipart_form.text("metadata[nsfw]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_website_link_right_square_bracket {
        multipart_form = multipart_form.text("metadata[website_link]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_twitter_right_square_bracket {
        multipart_form = multipart_form.text("metadata[twitter]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_discord_right_square_bracket {
        multipart_form = multipart_form.text("metadata[discord]", param_value.to_string());
    }
    if let Some(param_value) = p_metadata_left_square_bracket_telegram_right_square_bracket {
        multipart_form = multipart_form.text("metadata[telegram]", param_value.to_string());
    }
    if let Some(param_value) = p_network {
        multipart_form = multipart_form.text("network", param_value.to_string());
    }
    if let Some(param_value) = p_factory {
        multipart_form = multipart_form.text("factory", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeployFungibleResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeployFungibleResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeployFungibleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
pub async fn fetch_relevant_fungible_owners(configuration: &configuration::Configuration, contract_address: &str, networks: Vec<models::Networks>, viewer_fid: Option<i32>) -> Result<models::RelevantFungibleOwnersResponse, Error<FetchRelevantFungibleOwnersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_contract_address = contract_address;
    let p_networks = networks;
    let p_viewer_fid = viewer_fid;

    let uri_str = format!("{}/farcaster/fungible/owner/relevant", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("contract_address", &p_contract_address.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(&p_networks.into_iter().map(|p| ("networks".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("networks", &p_networks.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref param_value) = p_viewer_fid {
        req_builder = req_builder.query(&[("viewer_fid", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RelevantFungibleOwnersResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RelevantFungibleOwnersResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchRelevantFungibleOwnersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetches the token balances of a user given their FID
pub async fn fetch_user_balance(configuration: &configuration::Configuration, fid: i32, networks: Vec<models::Networks>) -> Result<models::BalanceResponse, Error<FetchUserBalanceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_fid = fid;
    let p_networks = networks;

    let uri_str = format!("{}/farcaster/user/balance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("fid", &p_fid.to_string())]);
    req_builder = match "csv" {
        "multi" => req_builder.query(&p_networks.into_iter().map(|p| ("networks".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => req_builder.query(&[("networks", &p_networks.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::BalanceResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::BalanceResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUserBalanceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

