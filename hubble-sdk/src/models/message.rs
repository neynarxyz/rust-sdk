/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// Message : A Message is a delta operation on the Farcaster network that represents a state change. Messages are the fundamental unit of data in Farcaster and can represent various actions like: - Creating or removing casts (posts) - Adding or removing reactions - Following or unfollowing users - Updating profile data - Verifying Ethereum addresses  Each message contains: - A MessageData object with the actual content - A hash of the content for integrity verification - A cryptographic signature to prove authenticity - The signer's public key for verification  Messages are immutable once created and form an append-only log of all user actions on the network.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Message {
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "hashScheme")]
    pub hash_scheme: models::HashScheme,
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "signature")]
    pub signature: Vec<u8>,
    #[serde(rename = "signatureScheme")]
    pub signature_scheme: models::SignatureScheme,
    #[serde(rename = "signer")]
    pub signer: String,
    #[serde(rename = "data")]
    pub data: Box<models::MessageAllOfData>,
}

impl Message {
    /// A Message is a delta operation on the Farcaster network that represents a state change. Messages are the fundamental unit of data in Farcaster and can represent various actions like: - Creating or removing casts (posts) - Adding or removing reactions - Following or unfollowing users - Updating profile data - Verifying Ethereum addresses  Each message contains: - A MessageData object with the actual content - A hash of the content for integrity verification - A cryptographic signature to prove authenticity - The signer's public key for verification  Messages are immutable once created and form an append-only log of all user actions on the network.
    pub fn new(hash: String, hash_scheme: models::HashScheme, signature: Vec<u8>, signature_scheme: models::SignatureScheme, signer: String, data: models::MessageAllOfData) -> Message {
        Message {
            hash,
            hash_scheme,
            signature,
            signature_scheme,
            signer,
            data: Box::new(data),
        }
    }
}

