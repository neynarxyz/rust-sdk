/*
 * Farcaster Hub API
 *
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Neynar docs](https://docs.neynar.com/reference) for more details. 
 *
 * The version of the OpenAPI document: 2.21.0
 * Contact: team@neynar.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MessageType : Type of the MessageBody. - MESSAGE_TYPE_CAST_ADD: Add a new Cast - MESSAGE_TYPE_CAST_REMOVE: Remove an existing Cast - MESSAGE_TYPE_REACTION_ADD: Add a Reaction to a Cast - MESSAGE_TYPE_REACTION_REMOVE: Remove a Reaction from a Cast - MESSAGE_TYPE_LINK_ADD: Add a new Link - MESSAGE_TYPE_LINK_REMOVE: Remove an existing Link - MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS: Add a Verification of an Ethereum Address - MESSAGE_TYPE_VERIFICATION_REMOVE: Remove a Verification - MESSAGE_TYPE_USER_DATA_ADD: Add metadata about a user - MESSAGE_TYPE_USERNAME_PROOF: Add or replace a username proof - MESSAGE_TYPE_FRAME_ACTION: A Farcaster Frame action
/// Type of the MessageBody. - MESSAGE_TYPE_CAST_ADD: Add a new Cast - MESSAGE_TYPE_CAST_REMOVE: Remove an existing Cast - MESSAGE_TYPE_REACTION_ADD: Add a Reaction to a Cast - MESSAGE_TYPE_REACTION_REMOVE: Remove a Reaction from a Cast - MESSAGE_TYPE_LINK_ADD: Add a new Link - MESSAGE_TYPE_LINK_REMOVE: Remove an existing Link - MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS: Add a Verification of an Ethereum Address - MESSAGE_TYPE_VERIFICATION_REMOVE: Remove a Verification - MESSAGE_TYPE_USER_DATA_ADD: Add metadata about a user - MESSAGE_TYPE_USERNAME_PROOF: Add or replace a username proof - MESSAGE_TYPE_FRAME_ACTION: A Farcaster Frame action
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageType {
    #[serde(rename = "MESSAGE_TYPE_CAST_ADD")]
    MessageTypeCastAdd,
    #[serde(rename = "MESSAGE_TYPE_CAST_REMOVE")]
    MessageTypeCastRemove,
    #[serde(rename = "MESSAGE_TYPE_REACTION_ADD")]
    MessageTypeReactionAdd,
    #[serde(rename = "MESSAGE_TYPE_REACTION_REMOVE")]
    MessageTypeReactionRemove,
    #[serde(rename = "MESSAGE_TYPE_LINK_ADD")]
    MessageTypeLinkAdd,
    #[serde(rename = "MESSAGE_TYPE_LINK_REMOVE")]
    MessageTypeLinkRemove,
    #[serde(rename = "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS")]
    MessageTypeVerificationAddEthAddress,
    #[serde(rename = "MESSAGE_TYPE_VERIFICATION_REMOVE")]
    MessageTypeVerificationRemove,
    #[serde(rename = "MESSAGE_TYPE_USER_DATA_ADD")]
    MessageTypeUserDataAdd,
    #[serde(rename = "MESSAGE_TYPE_USERNAME_PROOF")]
    MessageTypeUsernameProof,
    #[serde(rename = "MESSAGE_TYPE_FRAME_ACTION")]
    MessageTypeFrameAction,

}

impl std::fmt::Display for MessageType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::MessageTypeCastAdd => write!(f, "MESSAGE_TYPE_CAST_ADD"),
            Self::MessageTypeCastRemove => write!(f, "MESSAGE_TYPE_CAST_REMOVE"),
            Self::MessageTypeReactionAdd => write!(f, "MESSAGE_TYPE_REACTION_ADD"),
            Self::MessageTypeReactionRemove => write!(f, "MESSAGE_TYPE_REACTION_REMOVE"),
            Self::MessageTypeLinkAdd => write!(f, "MESSAGE_TYPE_LINK_ADD"),
            Self::MessageTypeLinkRemove => write!(f, "MESSAGE_TYPE_LINK_REMOVE"),
            Self::MessageTypeVerificationAddEthAddress => write!(f, "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS"),
            Self::MessageTypeVerificationRemove => write!(f, "MESSAGE_TYPE_VERIFICATION_REMOVE"),
            Self::MessageTypeUserDataAdd => write!(f, "MESSAGE_TYPE_USER_DATA_ADD"),
            Self::MessageTypeUsernameProof => write!(f, "MESSAGE_TYPE_USERNAME_PROOF"),
            Self::MessageTypeFrameAction => write!(f, "MESSAGE_TYPE_FRAME_ACTION"),
        }
    }
}

impl Default for MessageType {
    fn default() -> MessageType {
        Self::MessageTypeCastAdd
    }
}

